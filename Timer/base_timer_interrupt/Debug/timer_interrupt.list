
timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001758  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f0  080018f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080018f0  080018f0  000118f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018f8  080018f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  0800190c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  0800190c  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007815  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001194  00000000  00000000  00027851  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  000289e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  000292a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f63c  00000000  00000000  00029ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005cbd  00000000  00000000  000490fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c299c  00000000  00000000  0004edb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000243c  00000000  00000000  001117d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018c8 	.word	0x080018c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080018c8 	.word	0x080018c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f994 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f89c 	bl	8000610 <MX_GPIO_Init>
  MX_TIM6_Init();
 80004d8:	f000 f864 	bl	80005a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80004dc:	4801      	ldr	r0, [pc, #4]	; (80004e4 <main+0x1c>)
 80004de:	f000 ff42 	bl	8001366 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <main+0x1a>
 80004e4:	20000028 	.word	0x20000028

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	; 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 f9de 	bl	80018b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <SystemClock_Config+0xb4>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a21      	ldr	r2, [pc, #132]	; (800059c <SystemClock_Config+0xb4>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <SystemClock_Config+0xb4>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <SystemClock_Config+0xb8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <SystemClock_Config+0xb8>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <SystemClock_Config+0xb8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	2301      	movs	r3, #1
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	2310      	movs	r3, #16
 800054e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000550:	2300      	movs	r3, #0
 8000552:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0320 	add.w	r3, r7, #32
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fad1 	bl	8000b00 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000564:	f000 f878 	bl	8000658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fd2c 	bl	8000fe0 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800058e:	f000 f863 	bl	8000658 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3750      	adds	r7, #80	; 0x50
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	40007000 	.word	0x40007000

080005a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_TIM6_Init+0x64>)
 80005b4:	4a15      	ldr	r2, [pc, #84]	; (800060c <MX_TIM6_Init+0x68>)
 80005b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <MX_TIM6_Init+0x64>)
 80005ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_TIM6_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_TIM6_Init+0x64>)
 80005c8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_TIM6_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <MX_TIM6_Init+0x64>)
 80005d6:	f000 fe9b 	bl	8001310 <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80005e0:	f000 f83a 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_TIM6_Init+0x64>)
 80005f2:	f001 f8ad 	bl	8001750 <HAL_TIMEx_MasterConfigSynchronization>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80005fc:	f000 f82c 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000028 	.word	0x20000028
 800060c:	40001000 	.word	0x40001000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_GPIO_Init+0x30>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <MX_GPIO_Init+0x30>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_GPIO_Init+0x30>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    //timer callback implementation here
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <HAL_MspInit+0x4c>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_MspInit+0x4c>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_MspInit+0x4c>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_MspInit+0x4c>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_MspInit+0x4c>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_MspInit+0x4c>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_TIM_Base_MspInit+0x48>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d115      	bne.n	80006f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_TIM_Base_MspInit+0x4c>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <HAL_TIM_Base_MspInit+0x4c>)
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_TIM_Base_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2036      	movs	r0, #54	; 0x36
 80006ec:	f000 f9d1 	bl	8000a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006f0:	2036      	movs	r0, #54	; 0x36
 80006f2:	f000 f9ea 	bl	8000aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40001000 	.word	0x40001000
 8000704:	40023800 	.word	0x40023800

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f89e 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <TIM6_DAC_IRQHandler+0x10>)
 800076a:	f000 fe20 	bl	80013ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000028 	.word	0x20000028

08000778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <SystemInit+0x28>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <SystemInit+0x28>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SystemInit+0x28>)
 800078e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000792:	609a      	str	r2, [r3, #8]
#endif
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <Reset_Handler>:
 80007a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007dc <LoopFillZerobss+0x14>
 80007a8:	2100      	movs	r1, #0
 80007aa:	e003      	b.n	80007b4 <LoopCopyDataInit>

080007ac <CopyDataInit>:
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <LoopFillZerobss+0x18>)
 80007ae:	585b      	ldr	r3, [r3, r1]
 80007b0:	5043      	str	r3, [r0, r1]
 80007b2:	3104      	adds	r1, #4

080007b4 <LoopCopyDataInit>:
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <LoopFillZerobss+0x1c>)
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <LoopFillZerobss+0x20>)
 80007b8:	1842      	adds	r2, r0, r1
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3f6      	bcc.n	80007ac <CopyDataInit>
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <LoopFillZerobss+0x24>)
 80007c0:	e002      	b.n	80007c8 <LoopFillZerobss>

080007c2 <FillZerobss>:
 80007c2:	2300      	movs	r3, #0
 80007c4:	f842 3b04 	str.w	r3, [r2], #4

080007c8 <LoopFillZerobss>:
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <LoopFillZerobss+0x28>)
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d3f9      	bcc.n	80007c2 <FillZerobss>
 80007ce:	f7ff ffd3 	bl	8000778 <SystemInit>
 80007d2:	f001 f84d 	bl	8001870 <__libc_init_array>
 80007d6:	f7ff fe77 	bl	80004c8 <main>
 80007da:	4770      	bx	lr
 80007dc:	20020000 	.word	0x20020000
 80007e0:	08001900 	.word	0x08001900
 80007e4:	20000000 	.word	0x20000000
 80007e8:	2000000c 	.word	0x2000000c
 80007ec:	2000000c 	.word	0x2000000c
 80007f0:	2000006c 	.word	0x2000006c

080007f4 <ADC_IRQHandler>:
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_Init+0x40>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <HAL_Init+0x40>)
 8000802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_Init+0x40>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_Init+0x40>)
 800080e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_Init+0x40>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <HAL_Init+0x40>)
 800081a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f92b 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000826:	2000      	movs	r0, #0
 8000828:	f000 f808 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082c:	f7ff ff1c 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023c00 	.word	0x40023c00

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x54>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x58>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f943 	bl	8000ae6 <HAL_SYSTICK_Config>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e00e      	b.n	8000888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	d80a      	bhi.n	8000886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000878:	f000 f90b 	bl	8000a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <HAL_InitTick+0x5c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	e000      	b.n	8000888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000000 	.word	0x20000000
 8000894:	20000008 	.word	0x20000008
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x20>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_IncTick+0x24>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_IncTick+0x24>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000068 	.word	0x20000068

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_GetTick+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000068 	.word	0x20000068

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	db0b      	blt.n	800096a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 021f 	and.w	r2, r3, #31
 8000958:	4907      	ldr	r1, [pc, #28]	; (8000978 <__NVIC_EnableIRQ+0x38>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	2001      	movs	r0, #1
 8000962:	fa00 f202 	lsl.w	r2, r0, r2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f1c3 0307 	rsb	r3, r3, #7
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	bf28      	it	cs
 80009ee:	2304      	movcs	r3, #4
 80009f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3304      	adds	r3, #4
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d902      	bls.n	8000a00 <NVIC_EncodePriority+0x30>
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	e000      	b.n	8000a02 <NVIC_EncodePriority+0x32>
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43d9      	mvns	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4313      	orrs	r3, r2
         );
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	; 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a48:	d301      	bcc.n	8000a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00f      	b.n	8000a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <SysTick_Config+0x40>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	f7ff ff8e 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x40>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff29 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff3e 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff8e 	bl	80009d0 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff31 	bl	8000940 <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffa2 	bl	8000a38 <SysTick_Config>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e25b      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d075      	beq.n	8000c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b1e:	4ba3      	ldr	r3, [pc, #652]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f003 030c 	and.w	r3, r3, #12
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d00c      	beq.n	8000b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b2a:	4ba0      	ldr	r3, [pc, #640]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b32:	2b08      	cmp	r3, #8
 8000b34:	d112      	bne.n	8000b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b36:	4b9d      	ldr	r3, [pc, #628]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b42:	d10b      	bne.n	8000b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b44:	4b99      	ldr	r3, [pc, #612]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d05b      	beq.n	8000c08 <HAL_RCC_OscConfig+0x108>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d157      	bne.n	8000c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e236      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b64:	d106      	bne.n	8000b74 <HAL_RCC_OscConfig+0x74>
 8000b66:	4b91      	ldr	r3, [pc, #580]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a90      	ldr	r2, [pc, #576]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e01d      	b.n	8000bb0 <HAL_RCC_OscConfig+0xb0>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b7c:	d10c      	bne.n	8000b98 <HAL_RCC_OscConfig+0x98>
 8000b7e:	4b8b      	ldr	r3, [pc, #556]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a8a      	ldr	r2, [pc, #552]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	4b88      	ldr	r3, [pc, #544]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a87      	ldr	r2, [pc, #540]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e00b      	b.n	8000bb0 <HAL_RCC_OscConfig+0xb0>
 8000b98:	4b84      	ldr	r3, [pc, #528]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a83      	ldr	r2, [pc, #524]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b81      	ldr	r3, [pc, #516]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a80      	ldr	r2, [pc, #512]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d013      	beq.n	8000be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fe84 	bl	80008c4 <HAL_GetTick>
 8000bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bbe:	e008      	b.n	8000bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc0:	f7ff fe80 	bl	80008c4 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b64      	cmp	r3, #100	; 0x64
 8000bcc:	d901      	bls.n	8000bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e1fb      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	4b76      	ldr	r3, [pc, #472]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f0      	beq.n	8000bc0 <HAL_RCC_OscConfig+0xc0>
 8000bde:	e014      	b.n	8000c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fe70 	bl	80008c4 <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be8:	f7ff fe6c 	bl	80008c4 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b64      	cmp	r3, #100	; 0x64
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e1e7      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfa:	4b6c      	ldr	r3, [pc, #432]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f0      	bne.n	8000be8 <HAL_RCC_OscConfig+0xe8>
 8000c06:	e000      	b.n	8000c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d063      	beq.n	8000cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c16:	4b65      	ldr	r3, [pc, #404]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00b      	beq.n	8000c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c22:	4b62      	ldr	r3, [pc, #392]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d11c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c2e:	4b5f      	ldr	r3, [pc, #380]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d116      	bne.n	8000c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d005      	beq.n	8000c52 <HAL_RCC_OscConfig+0x152>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d001      	beq.n	8000c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e1bb      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c52:	4b56      	ldr	r3, [pc, #344]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	4952      	ldr	r1, [pc, #328]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c62:	4313      	orrs	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c66:	e03a      	b.n	8000cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d020      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c70:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <HAL_RCC_OscConfig+0x2b0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c76:	f7ff fe25 	bl	80008c4 <HAL_GetTick>
 8000c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	e008      	b.n	8000c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c7e:	f7ff fe21 	bl	80008c4 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d901      	bls.n	8000c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e19c      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c90:	4b46      	ldr	r3, [pc, #280]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f0      	beq.n	8000c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9c:	4b43      	ldr	r3, [pc, #268]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4940      	ldr	r1, [pc, #256]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	4313      	orrs	r3, r2
 8000cae:	600b      	str	r3, [r1, #0]
 8000cb0:	e015      	b.n	8000cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <HAL_RCC_OscConfig+0x2b0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fe04 	bl	80008c4 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fe00 	bl	80008c4 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e17b      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f0      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d030      	beq.n	8000d4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d016      	beq.n	8000d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cf2:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <HAL_RCC_OscConfig+0x2b4>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf8:	f7ff fde4 	bl	80008c4 <HAL_GetTick>
 8000cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfe:	e008      	b.n	8000d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d00:	f7ff fde0 	bl	80008c4 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d901      	bls.n	8000d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e15b      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f0      	beq.n	8000d00 <HAL_RCC_OscConfig+0x200>
 8000d1e:	e015      	b.n	8000d4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_RCC_OscConfig+0x2b4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d26:	f7ff fdcd 	bl	80008c4 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fdc9 	bl	80008c4 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e144      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f0      	bne.n	8000d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a0 	beq.w	8000e9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d86:	2301      	movs	r3, #1
 8000d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_RCC_OscConfig+0x2b8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d121      	bne.n	8000dda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_RCC_OscConfig+0x2b8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_RCC_OscConfig+0x2b8>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000da2:	f7ff fd8f 	bl	80008c4 <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da8:	e011      	b.n	8000dce <HAL_RCC_OscConfig+0x2ce>
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	42470000 	.word	0x42470000
 8000db4:	42470e80 	.word	0x42470e80
 8000db8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dbc:	f7ff fd82 	bl	80008c4 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e0fd      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dce:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <HAL_RCC_OscConfig+0x4d4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d106      	bne.n	8000df0 <HAL_RCC_OscConfig+0x2f0>
 8000de2:	4b7d      	ldr	r3, [pc, #500]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de6:	4a7c      	ldr	r2, [pc, #496]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6713      	str	r3, [r2, #112]	; 0x70
 8000dee:	e01c      	b.n	8000e2a <HAL_RCC_OscConfig+0x32a>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b05      	cmp	r3, #5
 8000df6:	d10c      	bne.n	8000e12 <HAL_RCC_OscConfig+0x312>
 8000df8:	4b77      	ldr	r3, [pc, #476]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfc:	4a76      	ldr	r2, [pc, #472]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6713      	str	r3, [r2, #112]	; 0x70
 8000e04:	4b74      	ldr	r3, [pc, #464]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e08:	4a73      	ldr	r2, [pc, #460]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e10:	e00b      	b.n	8000e2a <HAL_RCC_OscConfig+0x32a>
 8000e12:	4b71      	ldr	r3, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e16:	4a70      	ldr	r2, [pc, #448]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e18:	f023 0301 	bic.w	r3, r3, #1
 8000e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1e:	4b6e      	ldr	r3, [pc, #440]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e22:	4a6d      	ldr	r2, [pc, #436]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e24:	f023 0304 	bic.w	r3, r3, #4
 8000e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d015      	beq.n	8000e5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e32:	f7ff fd47 	bl	80008c4 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e38:	e00a      	b.n	8000e50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3a:	f7ff fd43 	bl	80008c4 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e0bc      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e50:	4b61      	ldr	r3, [pc, #388]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0ee      	beq.n	8000e3a <HAL_RCC_OscConfig+0x33a>
 8000e5c:	e014      	b.n	8000e88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fd31 	bl	80008c4 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e64:	e00a      	b.n	8000e7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e66:	f7ff fd2d 	bl	80008c4 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e0a6      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e7c:	4b56      	ldr	r3, [pc, #344]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1ee      	bne.n	8000e66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d105      	bne.n	8000e9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8092 	beq.w	8000fc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d05c      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d141      	bne.n	8000f3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eb8:	4b48      	ldr	r3, [pc, #288]	; (8000fdc <HAL_RCC_OscConfig+0x4dc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fd01 	bl	80008c4 <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec6:	f7ff fcfd 	bl	80008c4 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e078      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed8:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f0      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69da      	ldr	r2, [r3, #28]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	019b      	lsls	r3, r3, #6
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	3b01      	subs	r3, #1
 8000efe:	041b      	lsls	r3, r3, #16
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	061b      	lsls	r3, r3, #24
 8000f08:	4933      	ldr	r1, [pc, #204]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <HAL_RCC_OscConfig+0x4dc>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fcd6 	bl	80008c4 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1c:	f7ff fcd2 	bl	80008c4 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e04d      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0x41c>
 8000f3a:	e045      	b.n	8000fc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_RCC_OscConfig+0x4dc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fcbf 	bl	80008c4 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4a:	f7ff fcbb 	bl	80008c4 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e036      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1f0      	bne.n	8000f4a <HAL_RCC_OscConfig+0x44a>
 8000f68:	e02e      	b.n	8000fc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e029      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_RCC_OscConfig+0x4d8>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d11c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d115      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d10d      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d106      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d001      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40007000 	.word	0x40007000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	42470060 	.word	0x42470060

08000fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0cc      	b.n	800118e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d90c      	bls.n	800101c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001002:	4b65      	ldr	r3, [pc, #404]	; (8001198 <HAL_RCC_ClockConfig+0x1b8>)
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <HAL_RCC_ClockConfig+0x1b8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d001      	beq.n	800101c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0b8      	b.n	800118e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d020      	beq.n	800106a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001034:	4b59      	ldr	r3, [pc, #356]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4a58      	ldr	r2, [pc, #352]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800103e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	4a52      	ldr	r2, [pc, #328]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001058:	4b50      	ldr	r3, [pc, #320]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	494d      	ldr	r1, [pc, #308]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	4313      	orrs	r3, r2
 8001068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d044      	beq.n	8001100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d107      	bne.n	800108e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	4b47      	ldr	r3, [pc, #284]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d119      	bne.n	80010be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e07f      	b.n	800118e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d003      	beq.n	800109e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800109a:	2b03      	cmp	r3, #3
 800109c:	d107      	bne.n	80010ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d109      	bne.n	80010be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e06f      	b.n	800118e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e067      	b.n	800118e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f023 0203 	bic.w	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4934      	ldr	r1, [pc, #208]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010d0:	f7ff fbf8 	bl	80008c4 <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d6:	e00a      	b.n	80010ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d8:	f7ff fbf4 	bl	80008c4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e04f      	b.n	800118e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 020c 	and.w	r2, r3, #12
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d1eb      	bne.n	80010d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_RCC_ClockConfig+0x1b8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d20c      	bcs.n	8001128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d001      	beq.n	8001128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e032      	b.n	800118e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d008      	beq.n	8001146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	4916      	ldr	r1, [pc, #88]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	4313      	orrs	r3, r2
 8001144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d009      	beq.n	8001166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	490e      	ldr	r1, [pc, #56]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	4313      	orrs	r3, r2
 8001164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001166:	f000 f821 	bl	80011ac <HAL_RCC_GetSysClockFreq>
 800116a:	4601      	mov	r1, r0
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
 800117a:	fa21 f303 	lsr.w	r3, r1, r3
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fb58 	bl	800083c <HAL_InitTick>

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00
 800119c:	40023800 	.word	0x40023800
 80011a0:	080018e0 	.word	0x080018e0
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_RCC_GetSysClockFreq+0x158>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d007      	beq.n	80011de <HAL_RCC_GetSysClockFreq+0x32>
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d008      	beq.n	80011e4 <HAL_RCC_GetSysClockFreq+0x38>
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 808d 	bne.w	80012f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011d8:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011da:	60bb      	str	r3, [r7, #8]
       break;
 80011dc:	e08c      	b.n	80012f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011de:	4b4b      	ldr	r3, [pc, #300]	; (800130c <HAL_RCC_GetSysClockFreq+0x160>)
 80011e0:	60bb      	str	r3, [r7, #8]
      break;
 80011e2:	e089      	b.n	80012f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_RCC_GetSysClockFreq+0x158>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011ee:	4b45      	ldr	r3, [pc, #276]	; (8001304 <HAL_RCC_GetSysClockFreq+0x158>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d023      	beq.n	8001242 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011fa:	4b42      	ldr	r3, [pc, #264]	; (8001304 <HAL_RCC_GetSysClockFreq+0x158>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	099b      	lsrs	r3, r3, #6
 8001200:	f04f 0400 	mov.w	r4, #0
 8001204:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	ea03 0501 	and.w	r5, r3, r1
 8001210:	ea04 0602 	and.w	r6, r4, r2
 8001214:	4a3d      	ldr	r2, [pc, #244]	; (800130c <HAL_RCC_GetSysClockFreq+0x160>)
 8001216:	fb02 f106 	mul.w	r1, r2, r6
 800121a:	2200      	movs	r2, #0
 800121c:	fb02 f205 	mul.w	r2, r2, r5
 8001220:	440a      	add	r2, r1
 8001222:	493a      	ldr	r1, [pc, #232]	; (800130c <HAL_RCC_GetSysClockFreq+0x160>)
 8001224:	fba5 0101 	umull	r0, r1, r5, r1
 8001228:	1853      	adds	r3, r2, r1
 800122a:	4619      	mov	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f04f 0400 	mov.w	r4, #0
 8001232:	461a      	mov	r2, r3
 8001234:	4623      	mov	r3, r4
 8001236:	f7fe ffc7 	bl	80001c8 <__aeabi_uldivmod>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e049      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_RCC_GetSysClockFreq+0x158>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	099b      	lsrs	r3, r3, #6
 8001248:	f04f 0400 	mov.w	r4, #0
 800124c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	ea03 0501 	and.w	r5, r3, r1
 8001258:	ea04 0602 	and.w	r6, r4, r2
 800125c:	4629      	mov	r1, r5
 800125e:	4632      	mov	r2, r6
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	f04f 0400 	mov.w	r4, #0
 8001268:	0154      	lsls	r4, r2, #5
 800126a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800126e:	014b      	lsls	r3, r1, #5
 8001270:	4619      	mov	r1, r3
 8001272:	4622      	mov	r2, r4
 8001274:	1b49      	subs	r1, r1, r5
 8001276:	eb62 0206 	sbc.w	r2, r2, r6
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	f04f 0400 	mov.w	r4, #0
 8001282:	0194      	lsls	r4, r2, #6
 8001284:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001288:	018b      	lsls	r3, r1, #6
 800128a:	1a5b      	subs	r3, r3, r1
 800128c:	eb64 0402 	sbc.w	r4, r4, r2
 8001290:	f04f 0100 	mov.w	r1, #0
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	00e2      	lsls	r2, r4, #3
 800129a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800129e:	00d9      	lsls	r1, r3, #3
 80012a0:	460b      	mov	r3, r1
 80012a2:	4614      	mov	r4, r2
 80012a4:	195b      	adds	r3, r3, r5
 80012a6:	eb44 0406 	adc.w	r4, r4, r6
 80012aa:	f04f 0100 	mov.w	r1, #0
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	02a2      	lsls	r2, r4, #10
 80012b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012b8:	0299      	lsls	r1, r3, #10
 80012ba:	460b      	mov	r3, r1
 80012bc:	4614      	mov	r4, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	4621      	mov	r1, r4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f04f 0400 	mov.w	r4, #0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	f7fe ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCC_GetSysClockFreq+0x158>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	3301      	adds	r3, #1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	60bb      	str	r3, [r7, #8]
      break;
 80012f0:	e002      	b.n	80012f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012f4:	60bb      	str	r3, [r7, #8]
      break;
 80012f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f8:	68bb      	ldr	r3, [r7, #8]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	00f42400 	.word	0x00f42400
 800130c:	017d7840 	.word	0x017d7840

08001310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e01d      	b.n	800135e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d106      	bne.n	800133c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff f9be 	bl	80006b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3304      	adds	r3, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f000 f95e 	bl	8001610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b06      	cmp	r3, #6
 800138e:	d007      	beq.n	80013a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d122      	bne.n	800140a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d11b      	bne.n	800140a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f06f 0202 	mvn.w	r2, #2
 80013da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f8ee 	bl	80015d2 <HAL_TIM_IC_CaptureCallback>
 80013f6:	e005      	b.n	8001404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8e0 	bl	80015be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f8f1 	bl	80015e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b04      	cmp	r3, #4
 8001416:	d122      	bne.n	800145e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b04      	cmp	r3, #4
 8001424:	d11b      	bne.n	800145e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f06f 0204 	mvn.w	r2, #4
 800142e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8c4 	bl	80015d2 <HAL_TIM_IC_CaptureCallback>
 800144a:	e005      	b.n	8001458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f8b6 	bl	80015be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f8c7 	bl	80015e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b08      	cmp	r3, #8
 800146a:	d122      	bne.n	80014b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b08      	cmp	r3, #8
 8001478:	d11b      	bne.n	80014b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0208 	mvn.w	r2, #8
 8001482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f89a 	bl	80015d2 <HAL_TIM_IC_CaptureCallback>
 800149e:	e005      	b.n	80014ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f88c 	bl	80015be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f89d 	bl	80015e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b10      	cmp	r3, #16
 80014be:	d122      	bne.n	8001506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d11b      	bne.n	8001506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f06f 0210 	mvn.w	r2, #16
 80014d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2208      	movs	r2, #8
 80014dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f870 	bl	80015d2 <HAL_TIM_IC_CaptureCallback>
 80014f2:	e005      	b.n	8001500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f862 	bl	80015be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f873 	bl	80015e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10e      	bne.n	8001532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f06f 0201 	mvn.w	r2, #1
 800152a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff f889 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153c:	2b80      	cmp	r3, #128	; 0x80
 800153e:	d10e      	bne.n	800155e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154a:	2b80      	cmp	r3, #128	; 0x80
 800154c:	d107      	bne.n	800155e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f97f 	bl	800185c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001568:	2b40      	cmp	r3, #64	; 0x40
 800156a:	d10e      	bne.n	800158a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	d107      	bne.n	800158a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f838 	bl	80015fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b20      	cmp	r3, #32
 8001596:	d10e      	bne.n	80015b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d107      	bne.n	80015b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f06f 0220 	mvn.w	r2, #32
 80015ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f949 	bl	8001848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a40      	ldr	r2, [pc, #256]	; (8001724 <TIM_Base_SetConfig+0x114>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <TIM_Base_SetConfig+0x40>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162e:	d00f      	beq.n	8001650 <TIM_Base_SetConfig+0x40>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a3d      	ldr	r2, [pc, #244]	; (8001728 <TIM_Base_SetConfig+0x118>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00b      	beq.n	8001650 <TIM_Base_SetConfig+0x40>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3c      	ldr	r2, [pc, #240]	; (800172c <TIM_Base_SetConfig+0x11c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <TIM_Base_SetConfig+0x40>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <TIM_Base_SetConfig+0x120>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d003      	beq.n	8001650 <TIM_Base_SetConfig+0x40>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3a      	ldr	r2, [pc, #232]	; (8001734 <TIM_Base_SetConfig+0x124>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d108      	bne.n	8001662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <TIM_Base_SetConfig+0x114>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d02b      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d027      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <TIM_Base_SetConfig+0x118>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d023      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <TIM_Base_SetConfig+0x11c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a2a      	ldr	r2, [pc, #168]	; (8001730 <TIM_Base_SetConfig+0x120>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01b      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <TIM_Base_SetConfig+0x124>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d017      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a28      	ldr	r2, [pc, #160]	; (8001738 <TIM_Base_SetConfig+0x128>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <TIM_Base_SetConfig+0x12c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00f      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <TIM_Base_SetConfig+0x130>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00b      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a25      	ldr	r2, [pc, #148]	; (8001744 <TIM_Base_SetConfig+0x134>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d007      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a24      	ldr	r2, [pc, #144]	; (8001748 <TIM_Base_SetConfig+0x138>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d003      	beq.n	80016c2 <TIM_Base_SetConfig+0xb2>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a23      	ldr	r2, [pc, #140]	; (800174c <TIM_Base_SetConfig+0x13c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d108      	bne.n	80016d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <TIM_Base_SetConfig+0x114>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d003      	beq.n	8001708 <TIM_Base_SetConfig+0xf8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <TIM_Base_SetConfig+0x124>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d103      	bne.n	8001710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40010000 	.word	0x40010000
 8001728:	40000400 	.word	0x40000400
 800172c:	40000800 	.word	0x40000800
 8001730:	40000c00 	.word	0x40000c00
 8001734:	40010400 	.word	0x40010400
 8001738:	40014000 	.word	0x40014000
 800173c:	40014400 	.word	0x40014400
 8001740:	40014800 	.word	0x40014800
 8001744:	40001800 	.word	0x40001800
 8001748:	40001c00 	.word	0x40001c00
 800174c:	40002000 	.word	0x40002000

08001750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001764:	2302      	movs	r3, #2
 8001766:	e05a      	b.n	800181e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d022      	beq.n	80017f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b4:	d01d      	beq.n	80017f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d018      	beq.n	80017f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00e      	beq.n	80017f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d009      	beq.n	80017f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d004      	beq.n	80017f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a15      	ldr	r2, [pc, #84]	; (8001844 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10c      	bne.n	800180c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	4313      	orrs	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40010000 	.word	0x40010000
 8001830:	40000400 	.word	0x40000400
 8001834:	40000800 	.word	0x40000800
 8001838:	40000c00 	.word	0x40000c00
 800183c:	40010400 	.word	0x40010400
 8001840:	40014000 	.word	0x40014000
 8001844:	40001800 	.word	0x40001800

08001848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <__libc_init_array>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	4e0d      	ldr	r6, [pc, #52]	; (80018a8 <__libc_init_array+0x38>)
 8001874:	4c0d      	ldr	r4, [pc, #52]	; (80018ac <__libc_init_array+0x3c>)
 8001876:	1ba4      	subs	r4, r4, r6
 8001878:	10a4      	asrs	r4, r4, #2
 800187a:	2500      	movs	r5, #0
 800187c:	42a5      	cmp	r5, r4
 800187e:	d109      	bne.n	8001894 <__libc_init_array+0x24>
 8001880:	4e0b      	ldr	r6, [pc, #44]	; (80018b0 <__libc_init_array+0x40>)
 8001882:	4c0c      	ldr	r4, [pc, #48]	; (80018b4 <__libc_init_array+0x44>)
 8001884:	f000 f820 	bl	80018c8 <_init>
 8001888:	1ba4      	subs	r4, r4, r6
 800188a:	10a4      	asrs	r4, r4, #2
 800188c:	2500      	movs	r5, #0
 800188e:	42a5      	cmp	r5, r4
 8001890:	d105      	bne.n	800189e <__libc_init_array+0x2e>
 8001892:	bd70      	pop	{r4, r5, r6, pc}
 8001894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001898:	4798      	blx	r3
 800189a:	3501      	adds	r5, #1
 800189c:	e7ee      	b.n	800187c <__libc_init_array+0xc>
 800189e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018a2:	4798      	blx	r3
 80018a4:	3501      	adds	r5, #1
 80018a6:	e7f2      	b.n	800188e <__libc_init_array+0x1e>
 80018a8:	080018f8 	.word	0x080018f8
 80018ac:	080018f8 	.word	0x080018f8
 80018b0:	080018f8 	.word	0x080018f8
 80018b4:	080018fc 	.word	0x080018fc

080018b8 <memset>:
 80018b8:	4402      	add	r2, r0
 80018ba:	4603      	mov	r3, r0
 80018bc:	4293      	cmp	r3, r2
 80018be:	d100      	bne.n	80018c2 <memset+0xa>
 80018c0:	4770      	bx	lr
 80018c2:	f803 1b01 	strb.w	r1, [r3], #1
 80018c6:	e7f9      	b.n	80018bc <memset+0x4>

080018c8 <_init>:
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ca:	bf00      	nop
 80018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ce:	bc08      	pop	{r3}
 80018d0:	469e      	mov	lr, r3
 80018d2:	4770      	bx	lr

080018d4 <_fini>:
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	bf00      	nop
 80018d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018da:	bc08      	pop	{r3}
 80018dc:	469e      	mov	lr, r3
 80018de:	4770      	bx	lr
