
CAN_loopback_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003acc  08003acc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ad4  08003ad4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad8  08003ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08003b4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003b4c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008720  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ef  00000000  00000000  000287c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a8  00000000  00000000  00029db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205fb  00000000  00000000  0002ac48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062b0  00000000  00000000  0004b243  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c45c6  00000000  00000000  000514f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115ab9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  00115b34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039cc 	.word	0x080039cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080039cc 	.word	0x080039cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000584:	f000 fbb0 	bl	8000ce8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000588:	f000 f820 	bl	80005cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800058c:	f000 f8dc 	bl	8000748 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000590:	f000 f87a 	bl	8000688 <MX_CAN1_Init>
	MX_UART4_Init();
 8000594:	f000 f8ae 	bl	80006f4 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	can1_filter_config();
 8000598:	f000 f8f0 	bl	800077c <can1_filter_config>

	if (HAL_CAN_ActivateNotification(&hcan1,
 800059c:	f240 4103 	movw	r1, #1027	; 0x403
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <main+0x48>)
 80005a2:	f001 f820 	bl	80015e6 <HAL_CAN_ActivateNotification>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <main+0x30>
	CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)
			!= HAL_OK) //set interrupt enable bits
			{
		Error_Handler();
 80005ac:	f000 f9fa 	bl	80009a4 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) //moves operating mode from initialization to normal
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <main+0x48>)
 80005b2:	f000 fde7 	bl	8001184 <HAL_CAN_Start>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <main+0x40>
			{
		Error_Handler();
 80005bc:	f000 f9f2 	bl	80009a4 <Error_Handler>
	}

	can1_tx();
 80005c0:	f000 f902 	bl	80007c8 <can1_tx>
	//can1_rx(); - directly receive in the CAN Rx interrupt
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005c4:	e7fe      	b.n	80005c4 <main+0x44>
 80005c6:	bf00      	nop
 80005c8:	200000d8 	.word	0x200000d8

080005cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fde8 	bl	80031b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SystemClock_Config+0xb4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <SystemClock_Config+0xb4>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SystemClock_Config+0xb4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <SystemClock_Config+0xb8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <SystemClock_Config+0xb8>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <SystemClock_Config+0xb8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fca5 	bl	8001f8c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x80>
		Error_Handler();
 8000648:	f000 f9ac 	bl	80009a4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 ff00 	bl	800246c <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xaa>
		Error_Handler();
 8000672:	f000 f997 	bl	80009a4 <Error_Handler>
	}
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_CAN1_Init+0x64>)
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_CAN1_Init+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_CAN1_Init+0x64>)
 8000694:	2210      	movs	r2, #16
 8000696:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_CAN1_Init+0x64>)
 800069a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069e:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_CAN1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_CAN1_Init+0x64>)
 80006a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80006ac:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_CAN1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_CAN1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_CAN1_Init+0x64>)
 80006bc:	2201      	movs	r2, #1
 80006be:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_CAN1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_CAN1_Init+0x64>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_CAN1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_CAN1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_CAN1_Init+0x64>)
 80006da:	f000 fb77 	bl	8000dcc <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN1_Init+0x60>
		Error_Handler();
 80006e4:	f000 f95e 	bl	80009a4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000d8 	.word	0x200000d8
 80006f0:	40006400 	.word	0x40006400

080006f4 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_UART4_Init+0x4c>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_UART4_Init+0x50>)
 80006fc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_UART4_Init+0x4c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_UART4_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_UART4_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_UART4_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_UART4_Init+0x4c>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_UART4_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_UART4_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_UART4_Init+0x4c>)
 800072c:	f002 f86a 	bl	8002804 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_UART4_Init+0x46>
		Error_Handler();
 8000736:	f000 f935 	bl	80009a4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000098 	.word	0x20000098
 8000744:	40004c00 	.word	0x40004c00

08000748 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_GPIO_Init+0x30>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <MX_GPIO_Init+0x30>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_GPIO_Init+0x30>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <can1_filter_config>:

/* USER CODE BEGIN 4 */
void can1_filter_config(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 8000782:	2301      	movs	r3, #1
 8000784:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK) {
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <can1_filter_config+0x48>)
 80007ac:	f000 fc0a 	bl	8000fc4 <HAL_CAN_ConfigFilter>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <can1_filter_config+0x3e>
		Error_Handler();
 80007b6:	f000 f8f5 	bl	80009a4 <Error_Handler>
	}
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000d8 	.word	0x200000d8

080007c8 <can1_tx>:

void can1_tx(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
	 the Tx mailbox (out of the 3) in which the message is added
	 */
	uint32_t txMailbox;

	//message to be sent
	uint8_t msg[5] = { 'H', 'E', 'L', 'L', 'O' };
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <can1_tx+0x48>)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d6:	6018      	str	r0, [r3, #0]
 80007d8:	3304      	adds	r3, #4
 80007da:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;				//Length of data to be sent in bytes
 80007dc:	2305      	movs	r3, #5
 80007de:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D; //Standard CAN message 11-bit identifier, not extended identifier 29-bit identifier
 80007e0:	f240 635d 	movw	r3, #1629	; 0x65d
 80007e4:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;		//Type of identifier (standard or extended)
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; 	//Sending data frame
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]

	//to add the Tx message to the mailbox and triggers transmission
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg, &txMailbox) != HAL_OK) {
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	1d3a      	adds	r2, r7, #4
 80007f4:	f107 0110 	add.w	r1, r7, #16
 80007f8:	4806      	ldr	r0, [pc, #24]	; (8000814 <can1_tx+0x4c>)
 80007fa:	f000 fd07 	bl	800120c <HAL_CAN_AddTxMessage>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <can1_tx+0x40>
		Error_Handler();
 8000804:	f000 f8ce 	bl	80009a4 <Error_Handler>
	 //sending a message over UART after CAN message is transmitted
	 char arr[50];
	 sprintf((char *)arr, "Message Transmitted\n");
	 HAL_UART_Transmit(&huart4, (uint8_t *)arr, (uint16_t) strlen(arr), HAL_MAX_DELAY); //blocking UART Tx
	 */
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	080039e4 	.word	0x080039e4
 8000814:	200000d8 	.word	0x200000d8

08000818 <HAL_CAN_TxMailbox0CompleteCallback>:
	HAL_UART_Transmit(&huart4, (uint8_t*) arr, (uint16_t) strlen(arr),
	HAL_MAX_DELAY); //blocking UART Tx
}

//Tx complete callback is called when the CAN Tx is completed
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b090      	sub	sp, #64	; 0x40
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	char arr[50];
	sprintf((char*) arr, "Message Transmitted - Mailbox 0\n");
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 8000826:	461c      	mov	r4, r3
 8000828:	4615      	mov	r5, r2
 800082a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000832:	682b      	ldr	r3, [r5, #0]
 8000834:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*) arr, (uint16_t) strlen(arr),
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fcc8 	bl	80001d0 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	f107 010c 	add.w	r1, r7, #12
 8000848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 800084e:	f002 f826 	bl	800289e <HAL_UART_Transmit>
	HAL_MAX_DELAY); //blocking UART Tx
}
 8000852:	bf00      	nop
 8000854:	3740      	adds	r7, #64	; 0x40
 8000856:	46bd      	mov	sp, r7
 8000858:	bdb0      	pop	{r4, r5, r7, pc}
 800085a:	bf00      	nop
 800085c:	08003a04 	.word	0x08003a04
 8000860:	20000098 	.word	0x20000098

08000864 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b090      	sub	sp, #64	; 0x40
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	char arr[50];
	sprintf((char*) arr, "Message Transmitted - Mailbox 1\n");
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 8000872:	461c      	mov	r4, r3
 8000874:	4615      	mov	r5, r2
 8000876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	682b      	ldr	r3, [r5, #0]
 8000880:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*) arr, (uint16_t) strlen(arr),
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f107 010c 	add.w	r1, r7, #12
 8000894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 800089a:	f002 f800 	bl	800289e <HAL_UART_Transmit>
	HAL_MAX_DELAY); //blocking UART Tx
}
 800089e:	bf00      	nop
 80008a0:	3740      	adds	r7, #64	; 0x40
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdb0      	pop	{r4, r5, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08003a28 	.word	0x08003a28
 80008ac:	20000098 	.word	0x20000098

080008b0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b090      	sub	sp, #64	; 0x40
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	char arr[50];
	sprintf((char*) arr, "Message Transmitted - Mailbox 2\n");
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 80008be:	461c      	mov	r4, r3
 80008c0:	4615      	mov	r5, r2
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ca:	682b      	ldr	r3, [r5, #0]
 80008cc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*) arr, (uint16_t) strlen(arr),
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc7c 	bl	80001d0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f107 010c 	add.w	r1, r7, #12
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 80008e6:	f001 ffda 	bl	800289e <HAL_UART_Transmit>
	HAL_MAX_DELAY); //blocking UART Tx
}
 80008ea:	bf00      	nop
 80008ec:	3740      	adds	r7, #64	; 0x40
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bdb0      	pop	{r4, r5, r7, pc}
 80008f2:	bf00      	nop
 80008f4:	08003a4c 	.word	0x08003a4c
 80008f8:	20000098 	.word	0x20000098

080008fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b098      	sub	sp, #96	; 0x60
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t rcvd_msg[5];			//to store received data

	//while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0)); //check if any message present in Rx FIFO. Returns the no. of mailboxes filled in the FIFO specified

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg)
 8000904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000908:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000910:	f000 fd57 	bl	80013c2 <HAL_CAN_GetRxMessage>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
			!= HAL_OK) //polling based reception
			{
		Error_Handler();
 800091a:	f000 f843 	bl	80009a4 <Error_Handler>
	}

	char arr[50];
	sprintf(arr, "Message Recived - %s\n", rcvd_msg);
 800091e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	490c      	ldr	r1, [pc, #48]	; (8000958 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fc49 	bl	80031c0 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) arr, (uint16_t) strlen(arr),
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fc4c 	bl	80001d0 <strlen>
 8000938:	4603      	mov	r3, r0
 800093a:	b29a      	uxth	r2, r3
 800093c:	f107 0108 	add.w	r1, r7, #8
 8000940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000946:	f001 ffaa 	bl	800289e <HAL_UART_Transmit>
			HAL_MAX_DELAY); //blocking UART Tx
}
 800094a:	bf00      	nop
 800094c:	3760      	adds	r7, #96	; 0x60
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000d8 	.word	0x200000d8
 8000958:	080039ec 	.word	0x080039ec
 800095c:	20000098 	.word	0x20000098

08000960 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b091      	sub	sp, #68	; 0x44
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]

	char arr[50];
	sprintf(arr, "Error Occurred\n");
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <HAL_CAN_ErrorCallback+0x3c>)
 800096e:	461c      	mov	r4, r3
 8000970:	4613      	mov	r3, r2
 8000972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart4, (uint8_t*) arr, (uint16_t) strlen(arr),
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fc27 	bl	80001d0 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	b29a      	uxth	r2, r3
 8000986:	f107 010c 	add.w	r1, r7, #12
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <HAL_CAN_ErrorCallback+0x40>)
 8000990:	f001 ff85 	bl	800289e <HAL_UART_Transmit>
			HAL_MAX_DELAY); //blocking UART Tx
}
 8000994:	bf00      	nop
 8000996:	3744      	adds	r7, #68	; 0x44
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	08003a70 	.word	0x08003a70
 80009a0:	20000098 	.word	0x20000098

080009a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <HAL_CAN_MspInit+0xc4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d14c      	bne.n	8000ac0 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <HAL_CAN_MspInit+0xc8>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a27      	ldr	r2, [pc, #156]	; (8000acc <HAL_CAN_MspInit+0xc8>)
 8000a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_CAN_MspInit+0xc8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_CAN_MspInit+0xc8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <HAL_CAN_MspInit+0xc8>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <HAL_CAN_MspInit+0xc8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a70:	2309      	movs	r3, #9
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <HAL_CAN_MspInit+0xcc>)
 8000a7c:	f001 f8ec 	bl	8001c58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2013      	movs	r0, #19
 8000a86:	f001 f8b0 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a8a:	2013      	movs	r0, #19
 8000a8c:	f001 f8c9 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2014      	movs	r0, #20
 8000a96:	f001 f8a8 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a9a:	2014      	movs	r0, #20
 8000a9c:	f001 f8c1 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2015      	movs	r0, #21
 8000aa6:	f001 f8a0 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000aaa:	2015      	movs	r0, #21
 8000aac:	f001 f8b9 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2016      	movs	r0, #22
 8000ab6:	f001 f898 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000aba:	2016      	movs	r0, #22
 8000abc:	f001 f8b1 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0x84>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d12b      	bne.n	8000b4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_UART_MspInit+0x8c>)
 8000b4a:	f001 f885 	bl	8001c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40004c00 	.word	0x40004c00
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f8e8 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <CAN1_TX_IRQHandler+0x10>)
 8000bc6:	f000 fd34 	bl	8001632 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000d8 	.word	0x200000d8

08000bd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <CAN1_RX0_IRQHandler+0x10>)
 8000bda:	f000 fd2a 	bl	8001632 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200000d8 	.word	0x200000d8

08000be8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <CAN1_RX1_IRQHandler+0x10>)
 8000bee:	f000 fd20 	bl	8001632 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000d8 	.word	0x200000d8

08000bfc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <CAN1_SCE_IRQHandler+0x10>)
 8000c02:	f000 fd16 	bl	8001632 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000d8 	.word	0x200000d8

08000c10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x50>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x16>
		heap_end = &end;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <_sbrk+0x50>)
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <_sbrk+0x54>)
 8000c24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <_sbrk+0x50>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <_sbrk+0x50>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4413      	add	r3, r2
 8000c34:	466a      	mov	r2, sp
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d907      	bls.n	8000c4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c3a:	f002 fa8f 	bl	800315c <__errno>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	230c      	movs	r3, #12
 8000c42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c48:	e006      	b.n	8000c58 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <_sbrk+0x50>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a03      	ldr	r2, [pc, #12]	; (8000c60 <_sbrk+0x50>)
 8000c54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000008c 	.word	0x2000008c
 8000c64:	20000108 	.word	0x20000108

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <SystemInit+0x28>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <SystemInit+0x28>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SystemInit+0x28>)
 8000c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c82:	609a      	str	r2, [r3, #8]
#endif
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c9a:	e003      	b.n	8000ca4 <LoopCopyDataInit>

08000c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ca2:	3104      	adds	r1, #4

08000ca4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cac:	d3f6      	bcc.n	8000c9c <CopyDataInit>
  ldr  r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cb0:	e002      	b.n	8000cb8 <LoopFillZerobss>

08000cb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cb4:	f842 3b04 	str.w	r3, [r2], #4

08000cb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cbc:	d3f9      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cbe:	f7ff ffd3 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 fa51 	bl	8003168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc5b 	bl	8000580 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cd0:	08003adc 	.word	0x08003adc
  ldr  r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cd8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000cdc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ce0:	20000108 	.word	0x20000108

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 ff5f 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe4a 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 ff77 	bl	8001c3e <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d68:	f000 ff3f 	bl	8001bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000100 	.word	0x20000100

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000100 	.word	0x20000100

08000dcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e0ed      	b.n	8000fba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fe0a 	bl	8000a04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0202 	bic.w	r2, r2, #2
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e00:	f7ff ffd8 	bl	8000db4 <HAL_GetTick>
 8000e04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e06:	e012      	b.n	8000e2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e08:	f7ff ffd4 	bl	8000db4 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	d90b      	bls.n	8000e2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2205      	movs	r2, #5
 8000e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0c5      	b.n	8000fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1e5      	bne.n	8000e08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e4c:	f7ff ffb2 	bl	8000db4 <HAL_GetTick>
 8000e50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e52:	e012      	b.n	8000e7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e54:	f7ff ffae 	bl	8000db4 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	d90b      	bls.n	8000e7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2205      	movs	r2, #5
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e09f      	b.n	8000fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0e5      	beq.n	8000e54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e1b      	ldrb	r3, [r3, #24]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d108      	bne.n	8000ea2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7e5b      	ldrb	r3, [r3, #25]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d108      	bne.n	8000ecc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e007      	b.n	8000edc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7e9b      	ldrb	r3, [r3, #26]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d108      	bne.n	8000ef6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0220 	orr.w	r2, r2, #32
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e007      	b.n	8000f06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0220 	bic.w	r2, r2, #32
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7edb      	ldrb	r3, [r3, #27]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d108      	bne.n	8000f20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0210 	bic.w	r2, r2, #16
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e007      	b.n	8000f30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0210 	orr.w	r2, r2, #16
 8000f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7f1b      	ldrb	r3, [r3, #28]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d108      	bne.n	8000f4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0208 	orr.w	r2, r2, #8
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	e007      	b.n	8000f5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0208 	bic.w	r2, r2, #8
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7f5b      	ldrb	r3, [r3, #29]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d108      	bne.n	8000f74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0204 	orr.w	r2, r2, #4
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e007      	b.n	8000f84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0204 	bic.w	r2, r2, #4
 8000f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	431a      	orrs	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	ea42 0103 	orr.w	r1, r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d003      	beq.n	8000fea <HAL_CAN_ConfigFilter+0x26>
 8000fe2:	7cfb      	ldrb	r3, [r7, #19]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	f040 80be 	bne.w	8001166 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <HAL_CAN_ConfigFilter+0x1bc>)
 8000fec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ff4:	f043 0201 	orr.w	r2, r3, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001004:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	431a      	orrs	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	2201      	movs	r2, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	401a      	ands	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d123      	bne.n	8001094 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800106e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3248      	adds	r2, #72	; 0x48
 8001074:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001088:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800108a:	6979      	ldr	r1, [r7, #20]
 800108c:	3348      	adds	r3, #72	; 0x48
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	440b      	add	r3, r1
 8001092:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d122      	bne.n	80010e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3248      	adds	r2, #72	; 0x48
 80010c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d8:	6979      	ldr	r1, [r7, #20]
 80010da:	3348      	adds	r3, #72	; 0x48
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	401a      	ands	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010fc:	e007      	b.n	800110e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	431a      	orrs	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001128:	e007      	b.n	800113a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	431a      	orrs	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d107      	bne.n	8001152 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	431a      	orrs	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001158:	f023 0201 	bic.w	r2, r3, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	e006      	b.n	8001174 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
  }
}
 8001174:	4618      	mov	r0, r3
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40006400 	.word	0x40006400

08001184 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d12e      	bne.n	80011f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fe00 	bl	8000db4 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011b6:	e012      	b.n	80011de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b8:	f7ff fdfc 	bl	8000db4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b0a      	cmp	r3, #10
 80011c4:	d90b      	bls.n	80011de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2205      	movs	r2, #5
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e012      	b.n	8001204 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e5      	bne.n	80011b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e006      	b.n	8001204 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
  }
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001220:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d003      	beq.n	8001238 <HAL_CAN_AddTxMessage+0x2c>
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	2b02      	cmp	r3, #2
 8001234:	f040 80b8 	bne.w	80013a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10a      	bne.n	8001258 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80a0 	beq.w	8001398 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	0e1b      	lsrs	r3, r3, #24
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d907      	bls.n	8001278 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e09e      	b.n	80013b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001278:	2201      	movs	r2, #1
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	409a      	lsls	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10d      	bne.n	80012a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001294:	68f9      	ldr	r1, [r7, #12]
 8001296:	6809      	ldr	r1, [r1, #0]
 8001298:	431a      	orrs	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3318      	adds	r3, #24
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	440b      	add	r3, r1
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e00f      	b.n	80012c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b6:	68f9      	ldr	r1, [r7, #12]
 80012b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3318      	adds	r3, #24
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	440b      	add	r3, r1
 80012c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3318      	adds	r3, #24
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	440b      	add	r3, r1
 80012d6:	3304      	adds	r3, #4
 80012d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	7d1b      	ldrb	r3, [r3, #20]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d111      	bne.n	8001306 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3318      	adds	r3, #24
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	4413      	add	r3, r2
 80012ee:	3304      	adds	r3, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	6811      	ldr	r1, [r2, #0]
 80012f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3318      	adds	r3, #24
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3307      	adds	r3, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	061a      	lsls	r2, r3, #24
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3306      	adds	r3, #6
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	041b      	lsls	r3, r3, #16
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3305      	adds	r3, #5
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	4313      	orrs	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	3204      	adds	r2, #4
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	4610      	mov	r0, r2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	6811      	ldr	r1, [r2, #0]
 800132e:	ea43 0200 	orr.w	r2, r3, r0
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	440b      	add	r3, r1
 8001338:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800133c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3303      	adds	r3, #3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	061a      	lsls	r2, r3, #24
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3302      	adds	r3, #2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	4313      	orrs	r3, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	4610      	mov	r0, r2
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	6811      	ldr	r1, [r2, #0]
 8001364:	ea43 0200 	orr.w	r2, r3, r0
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	440b      	add	r3, r1
 800136e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001372:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3318      	adds	r3, #24
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	6811      	ldr	r1, [r2, #0]
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3318      	adds	r3, #24
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	440b      	add	r3, r1
 8001392:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e00e      	b.n	80013b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e006      	b.n	80013b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
  }
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013c2:	b480      	push	{r7}
 80013c4:	b087      	sub	sp, #28
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d003      	beq.n	80013e6 <HAL_CAN_GetRxMessage+0x24>
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f040 80f3 	bne.w	80015cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10e      	bne.n	800140a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0e7      	b.n	80015da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d107      	bne.n	8001428 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0d8      	b.n	80015da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	331b      	adds	r3, #27
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0204 	and.w	r2, r3, #4
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	331b      	adds	r3, #27
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0d5b      	lsrs	r3, r3, #21
 8001456:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e00b      	b.n	8001478 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	331b      	adds	r3, #27
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	331b      	adds	r3, #27
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0202 	and.w	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	331b      	adds	r3, #27
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	3304      	adds	r3, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 020f 	and.w	r2, r3, #15
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	331b      	adds	r3, #27
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4413      	add	r3, r2
 80014b2:	3304      	adds	r3, #4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	331b      	adds	r3, #27
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	3304      	adds	r3, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0c1b      	lsrs	r3, r3, #16
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	4413      	add	r3, r2
 80014e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0a1a      	lsrs	r2, r3, #8
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0c1a      	lsrs	r2, r3, #16
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3302      	adds	r3, #2
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0e1a      	lsrs	r2, r3, #24
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	3303      	adds	r3, #3
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3304      	adds	r3, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0a1a      	lsrs	r2, r3, #8
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3305      	adds	r3, #5
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0c1a      	lsrs	r2, r3, #16
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3306      	adds	r3, #6
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0e1a      	lsrs	r2, r3, #24
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3307      	adds	r3, #7
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d108      	bne.n	80015b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e006      	b.n	80015da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
  }
}
 80015da:	4618      	mov	r0, r3
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d002      	beq.n	8001604 <HAL_CAN_ActivateNotification+0x1e>
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d109      	bne.n	8001618 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6959      	ldr	r1, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e006      	b.n	8001626 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
  }
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b08a      	sub	sp, #40	; 0x28
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d07c      	beq.n	8001772 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d023      	beq.n	80016ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2201      	movs	r2, #1
 8001688:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff f8bf 	bl	8000818 <HAL_CAN_TxMailbox0CompleteCallback>
 800169a:	e016      	b.n	80016ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	e00c      	b.n	80016ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
 80016c2:	e002      	b.n	80016ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f965 	bl	8001994 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d024      	beq.n	800171e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff f8bb 	bl	8000864 <HAL_CAN_TxMailbox1CompleteCallback>
 80016ee:	e016      	b.n	800171e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	e00c      	b.n	800171e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170a:	2b00      	cmp	r3, #0
 800170c:	d004      	beq.n	8001718 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	e002      	b.n	800171e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f945 	bl	80019a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d024      	beq.n	8001772 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001730:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff f8b7 	bl	80008b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001742:	e016      	b.n	8001772 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
 8001756:	e00c      	b.n	8001772 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
 800176a:	e002      	b.n	8001772 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f925 	bl	80019bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2210      	movs	r2, #16
 8001794:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00b      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2208      	movs	r2, #8
 80017b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f90c 	bl	80019d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff f893 	bl	80008fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00c      	beq.n	80017fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2210      	movs	r2, #16
 80017f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00b      	beq.n	800181c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2208      	movs	r2, #8
 8001814:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f8ee 	bl	80019f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f8d5 	bl	80019e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2210      	movs	r2, #16
 8001854:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8d8 	bl	8001a0c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2208      	movs	r2, #8
 8001876:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f8d1 	bl	8001a20 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d075      	beq.n	8001974 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06c      	beq.n	800196c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03d      	beq.n	800196c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d038      	beq.n	800196c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001900:	2b30      	cmp	r3, #48	; 0x30
 8001902:	d017      	beq.n	8001934 <HAL_CAN_IRQHandler+0x302>
 8001904:	2b30      	cmp	r3, #48	; 0x30
 8001906:	d804      	bhi.n	8001912 <HAL_CAN_IRQHandler+0x2e0>
 8001908:	2b10      	cmp	r3, #16
 800190a:	d009      	beq.n	8001920 <HAL_CAN_IRQHandler+0x2ee>
 800190c:	2b20      	cmp	r3, #32
 800190e:	d00c      	beq.n	800192a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001910:	e024      	b.n	800195c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001912:	2b50      	cmp	r3, #80	; 0x50
 8001914:	d018      	beq.n	8001948 <HAL_CAN_IRQHandler+0x316>
 8001916:	2b60      	cmp	r3, #96	; 0x60
 8001918:	d01b      	beq.n	8001952 <HAL_CAN_IRQHandler+0x320>
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	d00f      	beq.n	800193e <HAL_CAN_IRQHandler+0x30c>
            break;
 800191e:	e01d      	b.n	800195c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001928:	e018      	b.n	800195c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001932:	e013      	b.n	800195c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f043 0320 	orr.w	r3, r3, #32
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193c:	e00e      	b.n	800195c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001946:	e009      	b.n	800195c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001950:	e004      	b.n	800195c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800195a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699a      	ldr	r2, [r3, #24]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800196a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2204      	movs	r2, #4
 8001972:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7fe ffea 	bl	8000960 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bb4:	f7ff ff8e 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff29 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff3e 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff8e 	bl	8001b28 <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5d 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff31 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	e16b      	b.n	8001f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 815a 	bne.w	8001f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d00b      	beq.n	8001cb2 <HAL_GPIO_Init+0x5a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d130      	bne.n	8001d14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 0201 	and.w	r2, r3, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0xfc>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d123      	bne.n	8001d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80b4 	beq.w	8001f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <HAL_GPIO_Init+0x308>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <HAL_GPIO_Init+0x308>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <HAL_GPIO_Init+0x308>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfa:	4a5a      	ldr	r2, [pc, #360]	; (8001f64 <HAL_GPIO_Init+0x30c>)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	220f      	movs	r2, #15
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <HAL_GPIO_Init+0x310>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d02b      	beq.n	8001e7e <HAL_GPIO_Init+0x226>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <HAL_GPIO_Init+0x314>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x222>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	; (8001f70 <HAL_GPIO_Init+0x318>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x21e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	; (8001f74 <HAL_GPIO_Init+0x31c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x21a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	; (8001f78 <HAL_GPIO_Init+0x320>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x216>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <HAL_GPIO_Init+0x328>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x20e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	; (8001f84 <HAL_GPIO_Init+0x32c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x20a>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e00e      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e62:	2308      	movs	r3, #8
 8001e64:	e00c      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00a      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x228>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4934      	ldr	r1, [pc, #208]	; (8001f64 <HAL_GPIO_Init+0x30c>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eec:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_GPIO_Init+0x330>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f ae90 	bls.w	8001c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40021c00 	.word	0x40021c00
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e25b      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d075      	beq.n	8002096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001faa:	4ba3      	ldr	r3, [pc, #652]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb6:	4ba0      	ldr	r3, [pc, #640]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d112      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b9d      	ldr	r3, [pc, #628]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	4b99      	ldr	r3, [pc, #612]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05b      	beq.n	8002094 <HAL_RCC_OscConfig+0x108>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d157      	bne.n	8002094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e236      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x74>
 8001ff2:	4b91      	ldr	r3, [pc, #580]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a90      	ldr	r2, [pc, #576]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xb0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x98>
 800200a:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a8a      	ldr	r2, [pc, #552]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a87      	ldr	r2, [pc, #540]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xb0>
 8002024:	4b84      	ldr	r3, [pc, #528]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a83      	ldr	r2, [pc, #524]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b81      	ldr	r3, [pc, #516]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a80      	ldr	r2, [pc, #512]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe feb6 	bl	8000db4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe feb2 	bl	8000db4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1fb      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b76      	ldr	r3, [pc, #472]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xc0>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fea2 	bl	8000db4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fe9e 	bl	8000db4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1e7      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0xe8>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020a2:	4b65      	ldr	r3, [pc, #404]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ae:	4b62      	ldr	r3, [pc, #392]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ba:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x152>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1bb      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b56      	ldr	r3, [pc, #344]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4952      	ldr	r1, [pc, #328]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b4f      	ldr	r3, [pc, #316]	; (800223c <HAL_RCC_OscConfig+0x2b0>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe fe57 	bl	8000db4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210a:	f7fe fe53 	bl	8000db4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e19c      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4940      	ldr	r1, [pc, #256]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCC_OscConfig+0x2b0>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fe36 	bl	8000db4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214c:	f7fe fe32 	bl	8000db4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e17b      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d030      	beq.n	80021d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b30      	ldr	r3, [pc, #192]	; (8002240 <HAL_RCC_OscConfig+0x2b4>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fe16 	bl	8000db4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe fe12 	bl	8000db4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e15b      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x200>
 80021aa:	e015      	b.n	80021d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_OscConfig+0x2b4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fdff 	bl	8000db4 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ba:	f7fe fdfb 	bl	8000db4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e144      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a0 	beq.w	8002326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10f      	bne.n	8002216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x2b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d121      	bne.n	8002266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_RCC_OscConfig+0x2b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_RCC_OscConfig+0x2b8>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7fe fdc1 	bl	8000db4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	e011      	b.n	800225a <HAL_RCC_OscConfig+0x2ce>
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	42470000 	.word	0x42470000
 8002240:	42470e80 	.word	0x42470e80
 8002244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fdb4 	bl	8000db4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0fd      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b81      	ldr	r3, [pc, #516]	; (8002460 <HAL_RCC_OscConfig+0x4d4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x2f0>
 800226e:	4b7d      	ldr	r3, [pc, #500]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a7c      	ldr	r2, [pc, #496]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	e01c      	b.n	80022b6 <HAL_RCC_OscConfig+0x32a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0x312>
 8002284:	4b77      	ldr	r3, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	4a76      	ldr	r2, [pc, #472]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	6713      	str	r3, [r2, #112]	; 0x70
 8002290:	4b74      	ldr	r3, [pc, #464]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a73      	ldr	r2, [pc, #460]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	e00b      	b.n	80022b6 <HAL_RCC_OscConfig+0x32a>
 800229e:	4b71      	ldr	r3, [pc, #452]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a70      	ldr	r2, [pc, #448]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a6d      	ldr	r2, [pc, #436]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7fe fd79 	bl	8000db4 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fd75 	bl	8000db4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0bc      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ee      	beq.n	80022c6 <HAL_RCC_OscConfig+0x33a>
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fd63 	bl	8000db4 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fd5f 	bl	8000db4 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0a6      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	4b56      	ldr	r3, [pc, #344]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a51      	ldr	r2, [pc, #324]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8092 	beq.w	8002454 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d05c      	beq.n	80023f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d141      	bne.n	80023c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b48      	ldr	r3, [pc, #288]	; (8002468 <HAL_RCC_OscConfig+0x4dc>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fd33 	bl	8000db4 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe fd2f 	bl	8000db4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e078      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	019b      	lsls	r3, r3, #6
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	3b01      	subs	r3, #1
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	4933      	ldr	r1, [pc, #204]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <HAL_RCC_OscConfig+0x4dc>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fd08 	bl	8000db4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fd04 	bl	8000db4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04d      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x41c>
 80023c6:	e045      	b.n	8002454 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x4dc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fcf1 	bl	8000db4 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe fced 	bl	8000db4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e036      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x44a>
 80023f4:	e02e      	b.n	8002454 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e029      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_RCC_OscConfig+0x4d8>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	429a      	cmp	r2, r3
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d115      	bne.n	8002450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800242a:	4013      	ands	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002430:	4293      	cmp	r3, r2
 8002432:	d10d      	bne.n	8002450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000
 8002464:	40023800 	.word	0x40023800
 8002468:	42470060 	.word	0x42470060

0800246c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0cc      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b68      	ldr	r3, [pc, #416]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d90c      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0b8      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	494d      	ldr	r1, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d044      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d119      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e07f      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d003      	beq.n	800252a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002526:	2b03      	cmp	r3, #3
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06f      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e067      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b37      	ldr	r3, [pc, #220]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fc2a 	bl	8000db4 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fc26 	bl	8000db4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e04f      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d20c      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e032      	b.n	800261a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4916      	ldr	r1, [pc, #88]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025f2:	f000 f821 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025f6:	4601      	mov	r1, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	fa21 f303 	lsr.w	r3, r1, r3
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fb8a 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023c00 	.word	0x40023c00
 8002628:	40023800 	.word	0x40023800
 800262c:	08003a80 	.word	0x08003a80
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800264e:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_GetSysClockFreq+0x158>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b04      	cmp	r3, #4
 8002658:	d007      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x32>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d008      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x38>
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 808d 	bne.w	800277e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002666:	60bb      	str	r3, [r7, #8]
       break;
 8002668:	e08c      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800266a:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCC_GetSysClockFreq+0x160>)
 800266c:	60bb      	str	r3, [r7, #8]
      break;
 800266e:	e089      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002670:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_GetSysClockFreq+0x158>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002678:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <HAL_RCC_GetSysClockFreq+0x158>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d023      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b42      	ldr	r3, [pc, #264]	; (8002790 <HAL_RCC_GetSysClockFreq+0x158>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	ea03 0501 	and.w	r5, r3, r1
 800269c:	ea04 0602 	and.w	r6, r4, r2
 80026a0:	4a3d      	ldr	r2, [pc, #244]	; (8002798 <HAL_RCC_GetSysClockFreq+0x160>)
 80026a2:	fb02 f106 	mul.w	r1, r2, r6
 80026a6:	2200      	movs	r2, #0
 80026a8:	fb02 f205 	mul.w	r2, r2, r5
 80026ac:	440a      	add	r2, r1
 80026ae:	493a      	ldr	r1, [pc, #232]	; (8002798 <HAL_RCC_GetSysClockFreq+0x160>)
 80026b0:	fba5 0101 	umull	r0, r1, r5, r1
 80026b4:	1853      	adds	r3, r2, r1
 80026b6:	4619      	mov	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f04f 0400 	mov.w	r4, #0
 80026be:	461a      	mov	r2, r3
 80026c0:	4623      	mov	r3, r4
 80026c2:	f7fd fddd 	bl	8000280 <__aeabi_uldivmod>
 80026c6:	4603      	mov	r3, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e049      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_RCC_GetSysClockFreq+0x158>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	f04f 0400 	mov.w	r4, #0
 80026d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	ea03 0501 	and.w	r5, r3, r1
 80026e4:	ea04 0602 	and.w	r6, r4, r2
 80026e8:	4629      	mov	r1, r5
 80026ea:	4632      	mov	r2, r6
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	0154      	lsls	r4, r2, #5
 80026f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026fa:	014b      	lsls	r3, r1, #5
 80026fc:	4619      	mov	r1, r3
 80026fe:	4622      	mov	r2, r4
 8002700:	1b49      	subs	r1, r1, r5
 8002702:	eb62 0206 	sbc.w	r2, r2, r6
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	0194      	lsls	r4, r2, #6
 8002710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002714:	018b      	lsls	r3, r1, #6
 8002716:	1a5b      	subs	r3, r3, r1
 8002718:	eb64 0402 	sbc.w	r4, r4, r2
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	00e2      	lsls	r2, r4, #3
 8002726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800272a:	00d9      	lsls	r1, r3, #3
 800272c:	460b      	mov	r3, r1
 800272e:	4614      	mov	r4, r2
 8002730:	195b      	adds	r3, r3, r5
 8002732:	eb44 0406 	adc.w	r4, r4, r6
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	02a2      	lsls	r2, r4, #10
 8002740:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002744:	0299      	lsls	r1, r3, #10
 8002746:	460b      	mov	r3, r1
 8002748:	4614      	mov	r4, r2
 800274a:	4618      	mov	r0, r3
 800274c:	4621      	mov	r1, r4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f04f 0400 	mov.w	r4, #0
 8002754:	461a      	mov	r2, r3
 8002756:	4623      	mov	r3, r4
 8002758:	f7fd fd92 	bl	8000280 <__aeabi_uldivmod>
 800275c:	4603      	mov	r3, r0
 800275e:	460c      	mov	r4, r1
 8002760:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetSysClockFreq+0x158>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	3301      	adds	r3, #1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	60bb      	str	r3, [r7, #8]
      break;
 800277c:	e002      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002780:	60bb      	str	r3, [r7, #8]
      break;
 8002782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002784:	68bb      	ldr	r3, [r7, #8]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	00f42400 	.word	0x00f42400
 8002798:	017d7840 	.word	0x017d7840

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000000 	.word	0x20000000

080027b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027b8:	f7ff fff0 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027bc:	4601      	mov	r1, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4a03      	ldr	r2, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	08003a90 	.word	0x08003a90

080027dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027e0:	f7ff ffdc 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e4:	4601      	mov	r1, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0b5b      	lsrs	r3, r3, #13
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	08003a90 	.word	0x08003a90

08002804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e03f      	b.n	8002896 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f952 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f90b 	bl	8002a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800287c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b088      	sub	sp, #32
 80028a2:	af02      	add	r7, sp, #8
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	f040 8083 	bne.w	80029c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_UART_Transmit+0x2e>
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e07b      	b.n	80029c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Transmit+0x40>
 80028da:	2302      	movs	r3, #2
 80028dc:	e074      	b.n	80029c8 <HAL_UART_Transmit+0x12a>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2221      	movs	r2, #33	; 0x21
 80028f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fa5e 	bl	8000db4 <HAL_GetTick>
 80028f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	88fa      	ldrh	r2, [r7, #6]
 8002904:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800290e:	e042      	b.n	8002996 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	d122      	bne.n	800296e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2200      	movs	r2, #0
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f84c 	bl	80029d0 <UART_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e042      	b.n	80029c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002954:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3302      	adds	r3, #2
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	e017      	b.n	8002996 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3301      	adds	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	e013      	b.n	8002996 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f829 	bl	80029d0 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e01f      	b.n	80029c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60ba      	str	r2, [r7, #8]
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1b7      	bne.n	8002910 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2140      	movs	r1, #64	; 0x40
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f810 	bl	80029d0 <UART_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e006      	b.n	80029c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e0:	e02c      	b.n	8002a3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d028      	beq.n	8002a3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80029f0:	f7fe f9e0 	bl	8000db4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d21d      	bcs.n	8002a3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e00f      	b.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d0c3      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002aa6:	f023 030c 	bic.w	r3, r3, #12
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	68f9      	ldr	r1, [r7, #12]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad2:	f040 818b 	bne.w	8002dec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4ac1      	ldr	r2, [pc, #772]	; (8002de0 <UART_SetConfig+0x37c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d005      	beq.n	8002aec <UART_SetConfig+0x88>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4abf      	ldr	r2, [pc, #764]	; (8002de4 <UART_SetConfig+0x380>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	f040 80bd 	bne.w	8002c66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aec:	f7ff fe76 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8002af0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	461d      	mov	r5, r3
 8002af6:	f04f 0600 	mov.w	r6, #0
 8002afa:	46a8      	mov	r8, r5
 8002afc:	46b1      	mov	r9, r6
 8002afe:	eb18 0308 	adds.w	r3, r8, r8
 8002b02:	eb49 0409 	adc.w	r4, r9, r9
 8002b06:	4698      	mov	r8, r3
 8002b08:	46a1      	mov	r9, r4
 8002b0a:	eb18 0805 	adds.w	r8, r8, r5
 8002b0e:	eb49 0906 	adc.w	r9, r9, r6
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b26:	4688      	mov	r8, r1
 8002b28:	4691      	mov	r9, r2
 8002b2a:	eb18 0005 	adds.w	r0, r8, r5
 8002b2e:	eb49 0106 	adc.w	r1, r9, r6
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	461d      	mov	r5, r3
 8002b38:	f04f 0600 	mov.w	r6, #0
 8002b3c:	196b      	adds	r3, r5, r5
 8002b3e:	eb46 0406 	adc.w	r4, r6, r6
 8002b42:	461a      	mov	r2, r3
 8002b44:	4623      	mov	r3, r4
 8002b46:	f7fd fb9b 	bl	8000280 <__aeabi_uldivmod>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4ba5      	ldr	r3, [pc, #660]	; (8002de8 <UART_SetConfig+0x384>)
 8002b52:	fba3 2302 	umull	r2, r3, r3, r2
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	461d      	mov	r5, r3
 8002b60:	f04f 0600 	mov.w	r6, #0
 8002b64:	46a9      	mov	r9, r5
 8002b66:	46b2      	mov	sl, r6
 8002b68:	eb19 0309 	adds.w	r3, r9, r9
 8002b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8002b70:	4699      	mov	r9, r3
 8002b72:	46a2      	mov	sl, r4
 8002b74:	eb19 0905 	adds.w	r9, r9, r5
 8002b78:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b90:	4689      	mov	r9, r1
 8002b92:	4692      	mov	sl, r2
 8002b94:	eb19 0005 	adds.w	r0, r9, r5
 8002b98:	eb4a 0106 	adc.w	r1, sl, r6
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	461d      	mov	r5, r3
 8002ba2:	f04f 0600 	mov.w	r6, #0
 8002ba6:	196b      	adds	r3, r5, r5
 8002ba8:	eb46 0406 	adc.w	r4, r6, r6
 8002bac:	461a      	mov	r2, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	f7fd fb66 	bl	8000280 <__aeabi_uldivmod>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <UART_SetConfig+0x384>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a86      	ldr	r2, [pc, #536]	; (8002de8 <UART_SetConfig+0x384>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bdc:	4498      	add	r8, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	461d      	mov	r5, r3
 8002be2:	f04f 0600 	mov.w	r6, #0
 8002be6:	46a9      	mov	r9, r5
 8002be8:	46b2      	mov	sl, r6
 8002bea:	eb19 0309 	adds.w	r3, r9, r9
 8002bee:	eb4a 040a 	adc.w	r4, sl, sl
 8002bf2:	4699      	mov	r9, r3
 8002bf4:	46a2      	mov	sl, r4
 8002bf6:	eb19 0905 	adds.w	r9, r9, r5
 8002bfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c12:	4689      	mov	r9, r1
 8002c14:	4692      	mov	sl, r2
 8002c16:	eb19 0005 	adds.w	r0, r9, r5
 8002c1a:	eb4a 0106 	adc.w	r1, sl, r6
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	461d      	mov	r5, r3
 8002c24:	f04f 0600 	mov.w	r6, #0
 8002c28:	196b      	adds	r3, r5, r5
 8002c2a:	eb46 0406 	adc.w	r4, r6, r6
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4623      	mov	r3, r4
 8002c32:	f7fd fb25 	bl	8000280 <__aeabi_uldivmod>
 8002c36:	4603      	mov	r3, r0
 8002c38:	460c      	mov	r4, r1
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <UART_SetConfig+0x384>)
 8002c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2164      	movs	r1, #100	; 0x64
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	3332      	adds	r3, #50	; 0x32
 8002c50:	4a65      	ldr	r2, [pc, #404]	; (8002de8 <UART_SetConfig+0x384>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	f003 0207 	and.w	r2, r3, #7
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4442      	add	r2, r8
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e26f      	b.n	8003146 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c66:	f7ff fda5 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8002c6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	461d      	mov	r5, r3
 8002c70:	f04f 0600 	mov.w	r6, #0
 8002c74:	46a8      	mov	r8, r5
 8002c76:	46b1      	mov	r9, r6
 8002c78:	eb18 0308 	adds.w	r3, r8, r8
 8002c7c:	eb49 0409 	adc.w	r4, r9, r9
 8002c80:	4698      	mov	r8, r3
 8002c82:	46a1      	mov	r9, r4
 8002c84:	eb18 0805 	adds.w	r8, r8, r5
 8002c88:	eb49 0906 	adc.w	r9, r9, r6
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ca0:	4688      	mov	r8, r1
 8002ca2:	4691      	mov	r9, r2
 8002ca4:	eb18 0005 	adds.w	r0, r8, r5
 8002ca8:	eb49 0106 	adc.w	r1, r9, r6
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	461d      	mov	r5, r3
 8002cb2:	f04f 0600 	mov.w	r6, #0
 8002cb6:	196b      	adds	r3, r5, r5
 8002cb8:	eb46 0406 	adc.w	r4, r6, r6
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7fd fade 	bl	8000280 <__aeabi_uldivmod>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <UART_SetConfig+0x384>)
 8002ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	461d      	mov	r5, r3
 8002cda:	f04f 0600 	mov.w	r6, #0
 8002cde:	46a9      	mov	r9, r5
 8002ce0:	46b2      	mov	sl, r6
 8002ce2:	eb19 0309 	adds.w	r3, r9, r9
 8002ce6:	eb4a 040a 	adc.w	r4, sl, sl
 8002cea:	4699      	mov	r9, r3
 8002cec:	46a2      	mov	sl, r4
 8002cee:	eb19 0905 	adds.w	r9, r9, r5
 8002cf2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d0a:	4689      	mov	r9, r1
 8002d0c:	4692      	mov	sl, r2
 8002d0e:	eb19 0005 	adds.w	r0, r9, r5
 8002d12:	eb4a 0106 	adc.w	r1, sl, r6
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	461d      	mov	r5, r3
 8002d1c:	f04f 0600 	mov.w	r6, #0
 8002d20:	196b      	adds	r3, r5, r5
 8002d22:	eb46 0406 	adc.w	r4, r6, r6
 8002d26:	461a      	mov	r2, r3
 8002d28:	4623      	mov	r3, r4
 8002d2a:	f7fd faa9 	bl	8000280 <__aeabi_uldivmod>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460c      	mov	r4, r1
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <UART_SetConfig+0x384>)
 8002d36:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2164      	movs	r1, #100	; 0x64
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	3332      	adds	r3, #50	; 0x32
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <UART_SetConfig+0x384>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d56:	4498      	add	r8, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	f04f 0600 	mov.w	r6, #0
 8002d60:	46a9      	mov	r9, r5
 8002d62:	46b2      	mov	sl, r6
 8002d64:	eb19 0309 	adds.w	r3, r9, r9
 8002d68:	eb4a 040a 	adc.w	r4, sl, sl
 8002d6c:	4699      	mov	r9, r3
 8002d6e:	46a2      	mov	sl, r4
 8002d70:	eb19 0905 	adds.w	r9, r9, r5
 8002d74:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d8c:	4689      	mov	r9, r1
 8002d8e:	4692      	mov	sl, r2
 8002d90:	eb19 0005 	adds.w	r0, r9, r5
 8002d94:	eb4a 0106 	adc.w	r1, sl, r6
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	461d      	mov	r5, r3
 8002d9e:	f04f 0600 	mov.w	r6, #0
 8002da2:	196b      	adds	r3, r5, r5
 8002da4:	eb46 0406 	adc.w	r4, r6, r6
 8002da8:	461a      	mov	r2, r3
 8002daa:	4623      	mov	r3, r4
 8002dac:	f7fd fa68 	bl	8000280 <__aeabi_uldivmod>
 8002db0:	4603      	mov	r3, r0
 8002db2:	460c      	mov	r4, r1
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <UART_SetConfig+0x384>)
 8002db8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	2164      	movs	r1, #100	; 0x64
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	3332      	adds	r3, #50	; 0x32
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <UART_SetConfig+0x384>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	095b      	lsrs	r3, r3, #5
 8002dd2:	f003 0207 	and.w	r2, r3, #7
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4442      	add	r2, r8
 8002ddc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002dde:	e1b2      	b.n	8003146 <UART_SetConfig+0x6e2>
 8002de0:	40011000 	.word	0x40011000
 8002de4:	40011400 	.word	0x40011400
 8002de8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4ad7      	ldr	r2, [pc, #860]	; (8003150 <UART_SetConfig+0x6ec>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d005      	beq.n	8002e02 <UART_SetConfig+0x39e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4ad6      	ldr	r2, [pc, #856]	; (8003154 <UART_SetConfig+0x6f0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f040 80d1 	bne.w	8002fa4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e02:	f7ff fceb 	bl	80027dc <HAL_RCC_GetPCLK2Freq>
 8002e06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	469a      	mov	sl, r3
 8002e0c:	f04f 0b00 	mov.w	fp, #0
 8002e10:	46d0      	mov	r8, sl
 8002e12:	46d9      	mov	r9, fp
 8002e14:	eb18 0308 	adds.w	r3, r8, r8
 8002e18:	eb49 0409 	adc.w	r4, r9, r9
 8002e1c:	4698      	mov	r8, r3
 8002e1e:	46a1      	mov	r9, r4
 8002e20:	eb18 080a 	adds.w	r8, r8, sl
 8002e24:	eb49 090b 	adc.w	r9, r9, fp
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e3c:	4688      	mov	r8, r1
 8002e3e:	4691      	mov	r9, r2
 8002e40:	eb1a 0508 	adds.w	r5, sl, r8
 8002e44:	eb4b 0609 	adc.w	r6, fp, r9
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	f04f 0400 	mov.w	r4, #0
 8002e5a:	0094      	lsls	r4, r2, #2
 8002e5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e60:	008b      	lsls	r3, r1, #2
 8002e62:	461a      	mov	r2, r3
 8002e64:	4623      	mov	r3, r4
 8002e66:	4628      	mov	r0, r5
 8002e68:	4631      	mov	r1, r6
 8002e6a:	f7fd fa09 	bl	8000280 <__aeabi_uldivmod>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460c      	mov	r4, r1
 8002e72:	461a      	mov	r2, r3
 8002e74:	4bb8      	ldr	r3, [pc, #736]	; (8003158 <UART_SetConfig+0x6f4>)
 8002e76:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	469b      	mov	fp, r3
 8002e84:	f04f 0c00 	mov.w	ip, #0
 8002e88:	46d9      	mov	r9, fp
 8002e8a:	46e2      	mov	sl, ip
 8002e8c:	eb19 0309 	adds.w	r3, r9, r9
 8002e90:	eb4a 040a 	adc.w	r4, sl, sl
 8002e94:	4699      	mov	r9, r3
 8002e96:	46a2      	mov	sl, r4
 8002e98:	eb19 090b 	adds.w	r9, r9, fp
 8002e9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eb4:	4689      	mov	r9, r1
 8002eb6:	4692      	mov	sl, r2
 8002eb8:	eb1b 0509 	adds.w	r5, fp, r9
 8002ebc:	eb4c 060a 	adc.w	r6, ip, sl
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	f04f 0400 	mov.w	r4, #0
 8002ed2:	0094      	lsls	r4, r2, #2
 8002ed4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ed8:	008b      	lsls	r3, r1, #2
 8002eda:	461a      	mov	r2, r3
 8002edc:	4623      	mov	r3, r4
 8002ede:	4628      	mov	r0, r5
 8002ee0:	4631      	mov	r1, r6
 8002ee2:	f7fd f9cd 	bl	8000280 <__aeabi_uldivmod>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460c      	mov	r4, r1
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b9a      	ldr	r3, [pc, #616]	; (8003158 <UART_SetConfig+0x6f4>)
 8002eee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2164      	movs	r1, #100	; 0x64
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a95      	ldr	r2, [pc, #596]	; (8003158 <UART_SetConfig+0x6f4>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	4498      	add	r8, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	469b      	mov	fp, r3
 8002f12:	f04f 0c00 	mov.w	ip, #0
 8002f16:	46d9      	mov	r9, fp
 8002f18:	46e2      	mov	sl, ip
 8002f1a:	eb19 0309 	adds.w	r3, r9, r9
 8002f1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f22:	4699      	mov	r9, r3
 8002f24:	46a2      	mov	sl, r4
 8002f26:	eb19 090b 	adds.w	r9, r9, fp
 8002f2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f42:	4689      	mov	r9, r1
 8002f44:	4692      	mov	sl, r2
 8002f46:	eb1b 0509 	adds.w	r5, fp, r9
 8002f4a:	eb4c 060a 	adc.w	r6, ip, sl
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4619      	mov	r1, r3
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	0094      	lsls	r4, r2, #2
 8002f62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f66:	008b      	lsls	r3, r1, #2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	4631      	mov	r1, r6
 8002f70:	f7fd f986 	bl	8000280 <__aeabi_uldivmod>
 8002f74:	4603      	mov	r3, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b77      	ldr	r3, [pc, #476]	; (8003158 <UART_SetConfig+0x6f4>)
 8002f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	2164      	movs	r1, #100	; 0x64
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	3332      	adds	r3, #50	; 0x32
 8002f8e:	4a72      	ldr	r2, [pc, #456]	; (8003158 <UART_SetConfig+0x6f4>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	f003 020f 	and.w	r2, r3, #15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4442      	add	r2, r8
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	e0d0      	b.n	8003146 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f7ff fc06 	bl	80027b4 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	469a      	mov	sl, r3
 8002fae:	f04f 0b00 	mov.w	fp, #0
 8002fb2:	46d0      	mov	r8, sl
 8002fb4:	46d9      	mov	r9, fp
 8002fb6:	eb18 0308 	adds.w	r3, r8, r8
 8002fba:	eb49 0409 	adc.w	r4, r9, r9
 8002fbe:	4698      	mov	r8, r3
 8002fc0:	46a1      	mov	r9, r4
 8002fc2:	eb18 080a 	adds.w	r8, r8, sl
 8002fc6:	eb49 090b 	adc.w	r9, r9, fp
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fde:	4688      	mov	r8, r1
 8002fe0:	4691      	mov	r9, r2
 8002fe2:	eb1a 0508 	adds.w	r5, sl, r8
 8002fe6:	eb4b 0609 	adc.w	r6, fp, r9
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	f04f 0400 	mov.w	r4, #0
 8002ffc:	0094      	lsls	r4, r2, #2
 8002ffe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003002:	008b      	lsls	r3, r1, #2
 8003004:	461a      	mov	r2, r3
 8003006:	4623      	mov	r3, r4
 8003008:	4628      	mov	r0, r5
 800300a:	4631      	mov	r1, r6
 800300c:	f7fd f938 	bl	8000280 <__aeabi_uldivmod>
 8003010:	4603      	mov	r3, r0
 8003012:	460c      	mov	r4, r1
 8003014:	461a      	mov	r2, r3
 8003016:	4b50      	ldr	r3, [pc, #320]	; (8003158 <UART_SetConfig+0x6f4>)
 8003018:	fba3 2302 	umull	r2, r3, r3, r2
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	469b      	mov	fp, r3
 8003026:	f04f 0c00 	mov.w	ip, #0
 800302a:	46d9      	mov	r9, fp
 800302c:	46e2      	mov	sl, ip
 800302e:	eb19 0309 	adds.w	r3, r9, r9
 8003032:	eb4a 040a 	adc.w	r4, sl, sl
 8003036:	4699      	mov	r9, r3
 8003038:	46a2      	mov	sl, r4
 800303a:	eb19 090b 	adds.w	r9, r9, fp
 800303e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003056:	4689      	mov	r9, r1
 8003058:	4692      	mov	sl, r2
 800305a:	eb1b 0509 	adds.w	r5, fp, r9
 800305e:	eb4c 060a 	adc.w	r6, ip, sl
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	0094      	lsls	r4, r2, #2
 8003076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800307a:	008b      	lsls	r3, r1, #2
 800307c:	461a      	mov	r2, r3
 800307e:	4623      	mov	r3, r4
 8003080:	4628      	mov	r0, r5
 8003082:	4631      	mov	r1, r6
 8003084:	f7fd f8fc 	bl	8000280 <__aeabi_uldivmod>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	461a      	mov	r2, r3
 800308e:	4b32      	ldr	r3, [pc, #200]	; (8003158 <UART_SetConfig+0x6f4>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a2d      	ldr	r2, [pc, #180]	; (8003158 <UART_SetConfig+0x6f4>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ae:	4498      	add	r8, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	469b      	mov	fp, r3
 80030b4:	f04f 0c00 	mov.w	ip, #0
 80030b8:	46d9      	mov	r9, fp
 80030ba:	46e2      	mov	sl, ip
 80030bc:	eb19 0309 	adds.w	r3, r9, r9
 80030c0:	eb4a 040a 	adc.w	r4, sl, sl
 80030c4:	4699      	mov	r9, r3
 80030c6:	46a2      	mov	sl, r4
 80030c8:	eb19 090b 	adds.w	r9, r9, fp
 80030cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030e4:	4689      	mov	r9, r1
 80030e6:	4692      	mov	sl, r2
 80030e8:	eb1b 0509 	adds.w	r5, fp, r9
 80030ec:	eb4c 060a 	adc.w	r6, ip, sl
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	f04f 0400 	mov.w	r4, #0
 8003102:	0094      	lsls	r4, r2, #2
 8003104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003108:	008b      	lsls	r3, r1, #2
 800310a:	461a      	mov	r2, r3
 800310c:	4623      	mov	r3, r4
 800310e:	4628      	mov	r0, r5
 8003110:	4631      	mov	r1, r6
 8003112:	f7fd f8b5 	bl	8000280 <__aeabi_uldivmod>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	461a      	mov	r2, r3
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <UART_SetConfig+0x6f4>)
 800311e:	fba3 1302 	umull	r1, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2164      	movs	r1, #100	; 0x64
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <UART_SetConfig+0x6f4>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 020f 	and.w	r2, r3, #15
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4442      	add	r2, r8
 8003142:	609a      	str	r2, [r3, #8]
}
 8003144:	e7ff      	b.n	8003146 <UART_SetConfig+0x6e2>
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003150:	40011000 	.word	0x40011000
 8003154:	40011400 	.word	0x40011400
 8003158:	51eb851f 	.word	0x51eb851f

0800315c <__errno>:
 800315c:	4b01      	ldr	r3, [pc, #4]	; (8003164 <__errno+0x8>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	2000000c 	.word	0x2000000c

08003168 <__libc_init_array>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	4e0d      	ldr	r6, [pc, #52]	; (80031a0 <__libc_init_array+0x38>)
 800316c:	4c0d      	ldr	r4, [pc, #52]	; (80031a4 <__libc_init_array+0x3c>)
 800316e:	1ba4      	subs	r4, r4, r6
 8003170:	10a4      	asrs	r4, r4, #2
 8003172:	2500      	movs	r5, #0
 8003174:	42a5      	cmp	r5, r4
 8003176:	d109      	bne.n	800318c <__libc_init_array+0x24>
 8003178:	4e0b      	ldr	r6, [pc, #44]	; (80031a8 <__libc_init_array+0x40>)
 800317a:	4c0c      	ldr	r4, [pc, #48]	; (80031ac <__libc_init_array+0x44>)
 800317c:	f000 fc26 	bl	80039cc <_init>
 8003180:	1ba4      	subs	r4, r4, r6
 8003182:	10a4      	asrs	r4, r4, #2
 8003184:	2500      	movs	r5, #0
 8003186:	42a5      	cmp	r5, r4
 8003188:	d105      	bne.n	8003196 <__libc_init_array+0x2e>
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003190:	4798      	blx	r3
 8003192:	3501      	adds	r5, #1
 8003194:	e7ee      	b.n	8003174 <__libc_init_array+0xc>
 8003196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800319a:	4798      	blx	r3
 800319c:	3501      	adds	r5, #1
 800319e:	e7f2      	b.n	8003186 <__libc_init_array+0x1e>
 80031a0:	08003ad4 	.word	0x08003ad4
 80031a4:	08003ad4 	.word	0x08003ad4
 80031a8:	08003ad4 	.word	0x08003ad4
 80031ac:	08003ad8 	.word	0x08003ad8

080031b0 <memset>:
 80031b0:	4402      	add	r2, r0
 80031b2:	4603      	mov	r3, r0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d100      	bne.n	80031ba <memset+0xa>
 80031b8:	4770      	bx	lr
 80031ba:	f803 1b01 	strb.w	r1, [r3], #1
 80031be:	e7f9      	b.n	80031b4 <memset+0x4>

080031c0 <siprintf>:
 80031c0:	b40e      	push	{r1, r2, r3}
 80031c2:	b500      	push	{lr}
 80031c4:	b09c      	sub	sp, #112	; 0x70
 80031c6:	ab1d      	add	r3, sp, #116	; 0x74
 80031c8:	9002      	str	r0, [sp, #8]
 80031ca:	9006      	str	r0, [sp, #24]
 80031cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031d0:	4809      	ldr	r0, [pc, #36]	; (80031f8 <siprintf+0x38>)
 80031d2:	9107      	str	r1, [sp, #28]
 80031d4:	9104      	str	r1, [sp, #16]
 80031d6:	4909      	ldr	r1, [pc, #36]	; (80031fc <siprintf+0x3c>)
 80031d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031dc:	9105      	str	r1, [sp, #20]
 80031de:	6800      	ldr	r0, [r0, #0]
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	a902      	add	r1, sp, #8
 80031e4:	f000 f866 	bl	80032b4 <_svfiprintf_r>
 80031e8:	9b02      	ldr	r3, [sp, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	b01c      	add	sp, #112	; 0x70
 80031f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031f4:	b003      	add	sp, #12
 80031f6:	4770      	bx	lr
 80031f8:	2000000c 	.word	0x2000000c
 80031fc:	ffff0208 	.word	0xffff0208

08003200 <__ssputs_r>:
 8003200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003204:	688e      	ldr	r6, [r1, #8]
 8003206:	429e      	cmp	r6, r3
 8003208:	4682      	mov	sl, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4690      	mov	r8, r2
 800320e:	4699      	mov	r9, r3
 8003210:	d837      	bhi.n	8003282 <__ssputs_r+0x82>
 8003212:	898a      	ldrh	r2, [r1, #12]
 8003214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003218:	d031      	beq.n	800327e <__ssputs_r+0x7e>
 800321a:	6825      	ldr	r5, [r4, #0]
 800321c:	6909      	ldr	r1, [r1, #16]
 800321e:	1a6f      	subs	r7, r5, r1
 8003220:	6965      	ldr	r5, [r4, #20]
 8003222:	2302      	movs	r3, #2
 8003224:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003228:	fb95 f5f3 	sdiv	r5, r5, r3
 800322c:	f109 0301 	add.w	r3, r9, #1
 8003230:	443b      	add	r3, r7
 8003232:	429d      	cmp	r5, r3
 8003234:	bf38      	it	cc
 8003236:	461d      	movcc	r5, r3
 8003238:	0553      	lsls	r3, r2, #21
 800323a:	d530      	bpl.n	800329e <__ssputs_r+0x9e>
 800323c:	4629      	mov	r1, r5
 800323e:	f000 fb2b 	bl	8003898 <_malloc_r>
 8003242:	4606      	mov	r6, r0
 8003244:	b950      	cbnz	r0, 800325c <__ssputs_r+0x5c>
 8003246:	230c      	movs	r3, #12
 8003248:	f8ca 3000 	str.w	r3, [sl]
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003252:	81a3      	strh	r3, [r4, #12]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325c:	463a      	mov	r2, r7
 800325e:	6921      	ldr	r1, [r4, #16]
 8003260:	f000 faa8 	bl	80037b4 <memcpy>
 8003264:	89a3      	ldrh	r3, [r4, #12]
 8003266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800326a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326e:	81a3      	strh	r3, [r4, #12]
 8003270:	6126      	str	r6, [r4, #16]
 8003272:	6165      	str	r5, [r4, #20]
 8003274:	443e      	add	r6, r7
 8003276:	1bed      	subs	r5, r5, r7
 8003278:	6026      	str	r6, [r4, #0]
 800327a:	60a5      	str	r5, [r4, #8]
 800327c:	464e      	mov	r6, r9
 800327e:	454e      	cmp	r6, r9
 8003280:	d900      	bls.n	8003284 <__ssputs_r+0x84>
 8003282:	464e      	mov	r6, r9
 8003284:	4632      	mov	r2, r6
 8003286:	4641      	mov	r1, r8
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	f000 fa9e 	bl	80037ca <memmove>
 800328e:	68a3      	ldr	r3, [r4, #8]
 8003290:	1b9b      	subs	r3, r3, r6
 8003292:	60a3      	str	r3, [r4, #8]
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	441e      	add	r6, r3
 8003298:	6026      	str	r6, [r4, #0]
 800329a:	2000      	movs	r0, #0
 800329c:	e7dc      	b.n	8003258 <__ssputs_r+0x58>
 800329e:	462a      	mov	r2, r5
 80032a0:	f000 fb54 	bl	800394c <_realloc_r>
 80032a4:	4606      	mov	r6, r0
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d1e2      	bne.n	8003270 <__ssputs_r+0x70>
 80032aa:	6921      	ldr	r1, [r4, #16]
 80032ac:	4650      	mov	r0, sl
 80032ae:	f000 faa5 	bl	80037fc <_free_r>
 80032b2:	e7c8      	b.n	8003246 <__ssputs_r+0x46>

080032b4 <_svfiprintf_r>:
 80032b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b8:	461d      	mov	r5, r3
 80032ba:	898b      	ldrh	r3, [r1, #12]
 80032bc:	061f      	lsls	r7, r3, #24
 80032be:	b09d      	sub	sp, #116	; 0x74
 80032c0:	4680      	mov	r8, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	4616      	mov	r6, r2
 80032c6:	d50f      	bpl.n	80032e8 <_svfiprintf_r+0x34>
 80032c8:	690b      	ldr	r3, [r1, #16]
 80032ca:	b96b      	cbnz	r3, 80032e8 <_svfiprintf_r+0x34>
 80032cc:	2140      	movs	r1, #64	; 0x40
 80032ce:	f000 fae3 	bl	8003898 <_malloc_r>
 80032d2:	6020      	str	r0, [r4, #0]
 80032d4:	6120      	str	r0, [r4, #16]
 80032d6:	b928      	cbnz	r0, 80032e4 <_svfiprintf_r+0x30>
 80032d8:	230c      	movs	r3, #12
 80032da:	f8c8 3000 	str.w	r3, [r8]
 80032de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032e2:	e0c8      	b.n	8003476 <_svfiprintf_r+0x1c2>
 80032e4:	2340      	movs	r3, #64	; 0x40
 80032e6:	6163      	str	r3, [r4, #20]
 80032e8:	2300      	movs	r3, #0
 80032ea:	9309      	str	r3, [sp, #36]	; 0x24
 80032ec:	2320      	movs	r3, #32
 80032ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032f2:	2330      	movs	r3, #48	; 0x30
 80032f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032f8:	9503      	str	r5, [sp, #12]
 80032fa:	f04f 0b01 	mov.w	fp, #1
 80032fe:	4637      	mov	r7, r6
 8003300:	463d      	mov	r5, r7
 8003302:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003306:	b10b      	cbz	r3, 800330c <_svfiprintf_r+0x58>
 8003308:	2b25      	cmp	r3, #37	; 0x25
 800330a:	d13e      	bne.n	800338a <_svfiprintf_r+0xd6>
 800330c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003310:	d00b      	beq.n	800332a <_svfiprintf_r+0x76>
 8003312:	4653      	mov	r3, sl
 8003314:	4632      	mov	r2, r6
 8003316:	4621      	mov	r1, r4
 8003318:	4640      	mov	r0, r8
 800331a:	f7ff ff71 	bl	8003200 <__ssputs_r>
 800331e:	3001      	adds	r0, #1
 8003320:	f000 80a4 	beq.w	800346c <_svfiprintf_r+0x1b8>
 8003324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003326:	4453      	add	r3, sl
 8003328:	9309      	str	r3, [sp, #36]	; 0x24
 800332a:	783b      	ldrb	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 809d 	beq.w	800346c <_svfiprintf_r+0x1b8>
 8003332:	2300      	movs	r3, #0
 8003334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800333c:	9304      	str	r3, [sp, #16]
 800333e:	9307      	str	r3, [sp, #28]
 8003340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003344:	931a      	str	r3, [sp, #104]	; 0x68
 8003346:	462f      	mov	r7, r5
 8003348:	2205      	movs	r2, #5
 800334a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800334e:	4850      	ldr	r0, [pc, #320]	; (8003490 <_svfiprintf_r+0x1dc>)
 8003350:	f7fc ff46 	bl	80001e0 <memchr>
 8003354:	9b04      	ldr	r3, [sp, #16]
 8003356:	b9d0      	cbnz	r0, 800338e <_svfiprintf_r+0xda>
 8003358:	06d9      	lsls	r1, r3, #27
 800335a:	bf44      	itt	mi
 800335c:	2220      	movmi	r2, #32
 800335e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003362:	071a      	lsls	r2, r3, #28
 8003364:	bf44      	itt	mi
 8003366:	222b      	movmi	r2, #43	; 0x2b
 8003368:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800336c:	782a      	ldrb	r2, [r5, #0]
 800336e:	2a2a      	cmp	r2, #42	; 0x2a
 8003370:	d015      	beq.n	800339e <_svfiprintf_r+0xea>
 8003372:	9a07      	ldr	r2, [sp, #28]
 8003374:	462f      	mov	r7, r5
 8003376:	2000      	movs	r0, #0
 8003378:	250a      	movs	r5, #10
 800337a:	4639      	mov	r1, r7
 800337c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003380:	3b30      	subs	r3, #48	; 0x30
 8003382:	2b09      	cmp	r3, #9
 8003384:	d94d      	bls.n	8003422 <_svfiprintf_r+0x16e>
 8003386:	b1b8      	cbz	r0, 80033b8 <_svfiprintf_r+0x104>
 8003388:	e00f      	b.n	80033aa <_svfiprintf_r+0xf6>
 800338a:	462f      	mov	r7, r5
 800338c:	e7b8      	b.n	8003300 <_svfiprintf_r+0x4c>
 800338e:	4a40      	ldr	r2, [pc, #256]	; (8003490 <_svfiprintf_r+0x1dc>)
 8003390:	1a80      	subs	r0, r0, r2
 8003392:	fa0b f000 	lsl.w	r0, fp, r0
 8003396:	4318      	orrs	r0, r3
 8003398:	9004      	str	r0, [sp, #16]
 800339a:	463d      	mov	r5, r7
 800339c:	e7d3      	b.n	8003346 <_svfiprintf_r+0x92>
 800339e:	9a03      	ldr	r2, [sp, #12]
 80033a0:	1d11      	adds	r1, r2, #4
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	9103      	str	r1, [sp, #12]
 80033a6:	2a00      	cmp	r2, #0
 80033a8:	db01      	blt.n	80033ae <_svfiprintf_r+0xfa>
 80033aa:	9207      	str	r2, [sp, #28]
 80033ac:	e004      	b.n	80033b8 <_svfiprintf_r+0x104>
 80033ae:	4252      	negs	r2, r2
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	9207      	str	r2, [sp, #28]
 80033b6:	9304      	str	r3, [sp, #16]
 80033b8:	783b      	ldrb	r3, [r7, #0]
 80033ba:	2b2e      	cmp	r3, #46	; 0x2e
 80033bc:	d10c      	bne.n	80033d8 <_svfiprintf_r+0x124>
 80033be:	787b      	ldrb	r3, [r7, #1]
 80033c0:	2b2a      	cmp	r3, #42	; 0x2a
 80033c2:	d133      	bne.n	800342c <_svfiprintf_r+0x178>
 80033c4:	9b03      	ldr	r3, [sp, #12]
 80033c6:	1d1a      	adds	r2, r3, #4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	9203      	str	r2, [sp, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bfb8      	it	lt
 80033d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033d4:	3702      	adds	r7, #2
 80033d6:	9305      	str	r3, [sp, #20]
 80033d8:	4d2e      	ldr	r5, [pc, #184]	; (8003494 <_svfiprintf_r+0x1e0>)
 80033da:	7839      	ldrb	r1, [r7, #0]
 80033dc:	2203      	movs	r2, #3
 80033de:	4628      	mov	r0, r5
 80033e0:	f7fc fefe 	bl	80001e0 <memchr>
 80033e4:	b138      	cbz	r0, 80033f6 <_svfiprintf_r+0x142>
 80033e6:	2340      	movs	r3, #64	; 0x40
 80033e8:	1b40      	subs	r0, r0, r5
 80033ea:	fa03 f000 	lsl.w	r0, r3, r0
 80033ee:	9b04      	ldr	r3, [sp, #16]
 80033f0:	4303      	orrs	r3, r0
 80033f2:	3701      	adds	r7, #1
 80033f4:	9304      	str	r3, [sp, #16]
 80033f6:	7839      	ldrb	r1, [r7, #0]
 80033f8:	4827      	ldr	r0, [pc, #156]	; (8003498 <_svfiprintf_r+0x1e4>)
 80033fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033fe:	2206      	movs	r2, #6
 8003400:	1c7e      	adds	r6, r7, #1
 8003402:	f7fc feed 	bl	80001e0 <memchr>
 8003406:	2800      	cmp	r0, #0
 8003408:	d038      	beq.n	800347c <_svfiprintf_r+0x1c8>
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <_svfiprintf_r+0x1e8>)
 800340c:	bb13      	cbnz	r3, 8003454 <_svfiprintf_r+0x1a0>
 800340e:	9b03      	ldr	r3, [sp, #12]
 8003410:	3307      	adds	r3, #7
 8003412:	f023 0307 	bic.w	r3, r3, #7
 8003416:	3308      	adds	r3, #8
 8003418:	9303      	str	r3, [sp, #12]
 800341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341c:	444b      	add	r3, r9
 800341e:	9309      	str	r3, [sp, #36]	; 0x24
 8003420:	e76d      	b.n	80032fe <_svfiprintf_r+0x4a>
 8003422:	fb05 3202 	mla	r2, r5, r2, r3
 8003426:	2001      	movs	r0, #1
 8003428:	460f      	mov	r7, r1
 800342a:	e7a6      	b.n	800337a <_svfiprintf_r+0xc6>
 800342c:	2300      	movs	r3, #0
 800342e:	3701      	adds	r7, #1
 8003430:	9305      	str	r3, [sp, #20]
 8003432:	4619      	mov	r1, r3
 8003434:	250a      	movs	r5, #10
 8003436:	4638      	mov	r0, r7
 8003438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800343c:	3a30      	subs	r2, #48	; 0x30
 800343e:	2a09      	cmp	r2, #9
 8003440:	d903      	bls.n	800344a <_svfiprintf_r+0x196>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0c8      	beq.n	80033d8 <_svfiprintf_r+0x124>
 8003446:	9105      	str	r1, [sp, #20]
 8003448:	e7c6      	b.n	80033d8 <_svfiprintf_r+0x124>
 800344a:	fb05 2101 	mla	r1, r5, r1, r2
 800344e:	2301      	movs	r3, #1
 8003450:	4607      	mov	r7, r0
 8003452:	e7f0      	b.n	8003436 <_svfiprintf_r+0x182>
 8003454:	ab03      	add	r3, sp, #12
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4622      	mov	r2, r4
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <_svfiprintf_r+0x1ec>)
 800345c:	a904      	add	r1, sp, #16
 800345e:	4640      	mov	r0, r8
 8003460:	f3af 8000 	nop.w
 8003464:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003468:	4681      	mov	r9, r0
 800346a:	d1d6      	bne.n	800341a <_svfiprintf_r+0x166>
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	065b      	lsls	r3, r3, #25
 8003470:	f53f af35 	bmi.w	80032de <_svfiprintf_r+0x2a>
 8003474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003476:	b01d      	add	sp, #116	; 0x74
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347c:	ab03      	add	r3, sp, #12
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	4622      	mov	r2, r4
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <_svfiprintf_r+0x1ec>)
 8003484:	a904      	add	r1, sp, #16
 8003486:	4640      	mov	r0, r8
 8003488:	f000 f882 	bl	8003590 <_printf_i>
 800348c:	e7ea      	b.n	8003464 <_svfiprintf_r+0x1b0>
 800348e:	bf00      	nop
 8003490:	08003a98 	.word	0x08003a98
 8003494:	08003a9e 	.word	0x08003a9e
 8003498:	08003aa2 	.word	0x08003aa2
 800349c:	00000000 	.word	0x00000000
 80034a0:	08003201 	.word	0x08003201

080034a4 <_printf_common>:
 80034a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a8:	4691      	mov	r9, r2
 80034aa:	461f      	mov	r7, r3
 80034ac:	688a      	ldr	r2, [r1, #8]
 80034ae:	690b      	ldr	r3, [r1, #16]
 80034b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034b4:	4293      	cmp	r3, r2
 80034b6:	bfb8      	it	lt
 80034b8:	4613      	movlt	r3, r2
 80034ba:	f8c9 3000 	str.w	r3, [r9]
 80034be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034c2:	4606      	mov	r6, r0
 80034c4:	460c      	mov	r4, r1
 80034c6:	b112      	cbz	r2, 80034ce <_printf_common+0x2a>
 80034c8:	3301      	adds	r3, #1
 80034ca:	f8c9 3000 	str.w	r3, [r9]
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	0699      	lsls	r1, r3, #26
 80034d2:	bf42      	ittt	mi
 80034d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034d8:	3302      	addmi	r3, #2
 80034da:	f8c9 3000 	strmi.w	r3, [r9]
 80034de:	6825      	ldr	r5, [r4, #0]
 80034e0:	f015 0506 	ands.w	r5, r5, #6
 80034e4:	d107      	bne.n	80034f6 <_printf_common+0x52>
 80034e6:	f104 0a19 	add.w	sl, r4, #25
 80034ea:	68e3      	ldr	r3, [r4, #12]
 80034ec:	f8d9 2000 	ldr.w	r2, [r9]
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	42ab      	cmp	r3, r5
 80034f4:	dc28      	bgt.n	8003548 <_printf_common+0xa4>
 80034f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	3300      	adds	r3, #0
 80034fe:	bf18      	it	ne
 8003500:	2301      	movne	r3, #1
 8003502:	0692      	lsls	r2, r2, #26
 8003504:	d42d      	bmi.n	8003562 <_printf_common+0xbe>
 8003506:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800350a:	4639      	mov	r1, r7
 800350c:	4630      	mov	r0, r6
 800350e:	47c0      	blx	r8
 8003510:	3001      	adds	r0, #1
 8003512:	d020      	beq.n	8003556 <_printf_common+0xb2>
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	68e5      	ldr	r5, [r4, #12]
 8003518:	f8d9 2000 	ldr.w	r2, [r9]
 800351c:	f003 0306 	and.w	r3, r3, #6
 8003520:	2b04      	cmp	r3, #4
 8003522:	bf08      	it	eq
 8003524:	1aad      	subeq	r5, r5, r2
 8003526:	68a3      	ldr	r3, [r4, #8]
 8003528:	6922      	ldr	r2, [r4, #16]
 800352a:	bf0c      	ite	eq
 800352c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003530:	2500      	movne	r5, #0
 8003532:	4293      	cmp	r3, r2
 8003534:	bfc4      	itt	gt
 8003536:	1a9b      	subgt	r3, r3, r2
 8003538:	18ed      	addgt	r5, r5, r3
 800353a:	f04f 0900 	mov.w	r9, #0
 800353e:	341a      	adds	r4, #26
 8003540:	454d      	cmp	r5, r9
 8003542:	d11a      	bne.n	800357a <_printf_common+0xd6>
 8003544:	2000      	movs	r0, #0
 8003546:	e008      	b.n	800355a <_printf_common+0xb6>
 8003548:	2301      	movs	r3, #1
 800354a:	4652      	mov	r2, sl
 800354c:	4639      	mov	r1, r7
 800354e:	4630      	mov	r0, r6
 8003550:	47c0      	blx	r8
 8003552:	3001      	adds	r0, #1
 8003554:	d103      	bne.n	800355e <_printf_common+0xba>
 8003556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800355a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355e:	3501      	adds	r5, #1
 8003560:	e7c3      	b.n	80034ea <_printf_common+0x46>
 8003562:	18e1      	adds	r1, r4, r3
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	2030      	movs	r0, #48	; 0x30
 8003568:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800356c:	4422      	add	r2, r4
 800356e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003576:	3302      	adds	r3, #2
 8003578:	e7c5      	b.n	8003506 <_printf_common+0x62>
 800357a:	2301      	movs	r3, #1
 800357c:	4622      	mov	r2, r4
 800357e:	4639      	mov	r1, r7
 8003580:	4630      	mov	r0, r6
 8003582:	47c0      	blx	r8
 8003584:	3001      	adds	r0, #1
 8003586:	d0e6      	beq.n	8003556 <_printf_common+0xb2>
 8003588:	f109 0901 	add.w	r9, r9, #1
 800358c:	e7d8      	b.n	8003540 <_printf_common+0x9c>
	...

08003590 <_printf_i>:
 8003590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003594:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003598:	460c      	mov	r4, r1
 800359a:	7e09      	ldrb	r1, [r1, #24]
 800359c:	b085      	sub	sp, #20
 800359e:	296e      	cmp	r1, #110	; 0x6e
 80035a0:	4617      	mov	r7, r2
 80035a2:	4606      	mov	r6, r0
 80035a4:	4698      	mov	r8, r3
 80035a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035a8:	f000 80b3 	beq.w	8003712 <_printf_i+0x182>
 80035ac:	d822      	bhi.n	80035f4 <_printf_i+0x64>
 80035ae:	2963      	cmp	r1, #99	; 0x63
 80035b0:	d036      	beq.n	8003620 <_printf_i+0x90>
 80035b2:	d80a      	bhi.n	80035ca <_printf_i+0x3a>
 80035b4:	2900      	cmp	r1, #0
 80035b6:	f000 80b9 	beq.w	800372c <_printf_i+0x19c>
 80035ba:	2958      	cmp	r1, #88	; 0x58
 80035bc:	f000 8083 	beq.w	80036c6 <_printf_i+0x136>
 80035c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80035c8:	e032      	b.n	8003630 <_printf_i+0xa0>
 80035ca:	2964      	cmp	r1, #100	; 0x64
 80035cc:	d001      	beq.n	80035d2 <_printf_i+0x42>
 80035ce:	2969      	cmp	r1, #105	; 0x69
 80035d0:	d1f6      	bne.n	80035c0 <_printf_i+0x30>
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	6813      	ldr	r3, [r2, #0]
 80035d6:	0605      	lsls	r5, r0, #24
 80035d8:	f103 0104 	add.w	r1, r3, #4
 80035dc:	d52a      	bpl.n	8003634 <_printf_i+0xa4>
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	da03      	bge.n	80035ee <_printf_i+0x5e>
 80035e6:	222d      	movs	r2, #45	; 0x2d
 80035e8:	425b      	negs	r3, r3
 80035ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035ee:	486f      	ldr	r0, [pc, #444]	; (80037ac <_printf_i+0x21c>)
 80035f0:	220a      	movs	r2, #10
 80035f2:	e039      	b.n	8003668 <_printf_i+0xd8>
 80035f4:	2973      	cmp	r1, #115	; 0x73
 80035f6:	f000 809d 	beq.w	8003734 <_printf_i+0x1a4>
 80035fa:	d808      	bhi.n	800360e <_printf_i+0x7e>
 80035fc:	296f      	cmp	r1, #111	; 0x6f
 80035fe:	d020      	beq.n	8003642 <_printf_i+0xb2>
 8003600:	2970      	cmp	r1, #112	; 0x70
 8003602:	d1dd      	bne.n	80035c0 <_printf_i+0x30>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f043 0320 	orr.w	r3, r3, #32
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	e003      	b.n	8003616 <_printf_i+0x86>
 800360e:	2975      	cmp	r1, #117	; 0x75
 8003610:	d017      	beq.n	8003642 <_printf_i+0xb2>
 8003612:	2978      	cmp	r1, #120	; 0x78
 8003614:	d1d4      	bne.n	80035c0 <_printf_i+0x30>
 8003616:	2378      	movs	r3, #120	; 0x78
 8003618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800361c:	4864      	ldr	r0, [pc, #400]	; (80037b0 <_printf_i+0x220>)
 800361e:	e055      	b.n	80036cc <_printf_i+0x13c>
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	1d19      	adds	r1, r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6011      	str	r1, [r2, #0]
 8003628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800362c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003630:	2301      	movs	r3, #1
 8003632:	e08c      	b.n	800374e <_printf_i+0x1be>
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6011      	str	r1, [r2, #0]
 8003638:	f010 0f40 	tst.w	r0, #64	; 0x40
 800363c:	bf18      	it	ne
 800363e:	b21b      	sxthne	r3, r3
 8003640:	e7cf      	b.n	80035e2 <_printf_i+0x52>
 8003642:	6813      	ldr	r3, [r2, #0]
 8003644:	6825      	ldr	r5, [r4, #0]
 8003646:	1d18      	adds	r0, r3, #4
 8003648:	6010      	str	r0, [r2, #0]
 800364a:	0628      	lsls	r0, r5, #24
 800364c:	d501      	bpl.n	8003652 <_printf_i+0xc2>
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	e002      	b.n	8003658 <_printf_i+0xc8>
 8003652:	0668      	lsls	r0, r5, #25
 8003654:	d5fb      	bpl.n	800364e <_printf_i+0xbe>
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	4854      	ldr	r0, [pc, #336]	; (80037ac <_printf_i+0x21c>)
 800365a:	296f      	cmp	r1, #111	; 0x6f
 800365c:	bf14      	ite	ne
 800365e:	220a      	movne	r2, #10
 8003660:	2208      	moveq	r2, #8
 8003662:	2100      	movs	r1, #0
 8003664:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003668:	6865      	ldr	r5, [r4, #4]
 800366a:	60a5      	str	r5, [r4, #8]
 800366c:	2d00      	cmp	r5, #0
 800366e:	f2c0 8095 	blt.w	800379c <_printf_i+0x20c>
 8003672:	6821      	ldr	r1, [r4, #0]
 8003674:	f021 0104 	bic.w	r1, r1, #4
 8003678:	6021      	str	r1, [r4, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d13d      	bne.n	80036fa <_printf_i+0x16a>
 800367e:	2d00      	cmp	r5, #0
 8003680:	f040 808e 	bne.w	80037a0 <_printf_i+0x210>
 8003684:	4665      	mov	r5, ip
 8003686:	2a08      	cmp	r2, #8
 8003688:	d10b      	bne.n	80036a2 <_printf_i+0x112>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	07db      	lsls	r3, r3, #31
 800368e:	d508      	bpl.n	80036a2 <_printf_i+0x112>
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	6862      	ldr	r2, [r4, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	bfde      	ittt	le
 8003698:	2330      	movle	r3, #48	; 0x30
 800369a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800369e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036a2:	ebac 0305 	sub.w	r3, ip, r5
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	f8cd 8000 	str.w	r8, [sp]
 80036ac:	463b      	mov	r3, r7
 80036ae:	aa03      	add	r2, sp, #12
 80036b0:	4621      	mov	r1, r4
 80036b2:	4630      	mov	r0, r6
 80036b4:	f7ff fef6 	bl	80034a4 <_printf_common>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d14d      	bne.n	8003758 <_printf_i+0x1c8>
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c0:	b005      	add	sp, #20
 80036c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036c6:	4839      	ldr	r0, [pc, #228]	; (80037ac <_printf_i+0x21c>)
 80036c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80036cc:	6813      	ldr	r3, [r2, #0]
 80036ce:	6821      	ldr	r1, [r4, #0]
 80036d0:	1d1d      	adds	r5, r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6015      	str	r5, [r2, #0]
 80036d6:	060a      	lsls	r2, r1, #24
 80036d8:	d50b      	bpl.n	80036f2 <_printf_i+0x162>
 80036da:	07ca      	lsls	r2, r1, #31
 80036dc:	bf44      	itt	mi
 80036de:	f041 0120 	orrmi.w	r1, r1, #32
 80036e2:	6021      	strmi	r1, [r4, #0]
 80036e4:	b91b      	cbnz	r3, 80036ee <_printf_i+0x15e>
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	f022 0220 	bic.w	r2, r2, #32
 80036ec:	6022      	str	r2, [r4, #0]
 80036ee:	2210      	movs	r2, #16
 80036f0:	e7b7      	b.n	8003662 <_printf_i+0xd2>
 80036f2:	064d      	lsls	r5, r1, #25
 80036f4:	bf48      	it	mi
 80036f6:	b29b      	uxthmi	r3, r3
 80036f8:	e7ef      	b.n	80036da <_printf_i+0x14a>
 80036fa:	4665      	mov	r5, ip
 80036fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003700:	fb02 3311 	mls	r3, r2, r1, r3
 8003704:	5cc3      	ldrb	r3, [r0, r3]
 8003706:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800370a:	460b      	mov	r3, r1
 800370c:	2900      	cmp	r1, #0
 800370e:	d1f5      	bne.n	80036fc <_printf_i+0x16c>
 8003710:	e7b9      	b.n	8003686 <_printf_i+0xf6>
 8003712:	6813      	ldr	r3, [r2, #0]
 8003714:	6825      	ldr	r5, [r4, #0]
 8003716:	6961      	ldr	r1, [r4, #20]
 8003718:	1d18      	adds	r0, r3, #4
 800371a:	6010      	str	r0, [r2, #0]
 800371c:	0628      	lsls	r0, r5, #24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	d501      	bpl.n	8003726 <_printf_i+0x196>
 8003722:	6019      	str	r1, [r3, #0]
 8003724:	e002      	b.n	800372c <_printf_i+0x19c>
 8003726:	066a      	lsls	r2, r5, #25
 8003728:	d5fb      	bpl.n	8003722 <_printf_i+0x192>
 800372a:	8019      	strh	r1, [r3, #0]
 800372c:	2300      	movs	r3, #0
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	4665      	mov	r5, ip
 8003732:	e7b9      	b.n	80036a8 <_printf_i+0x118>
 8003734:	6813      	ldr	r3, [r2, #0]
 8003736:	1d19      	adds	r1, r3, #4
 8003738:	6011      	str	r1, [r2, #0]
 800373a:	681d      	ldr	r5, [r3, #0]
 800373c:	6862      	ldr	r2, [r4, #4]
 800373e:	2100      	movs	r1, #0
 8003740:	4628      	mov	r0, r5
 8003742:	f7fc fd4d 	bl	80001e0 <memchr>
 8003746:	b108      	cbz	r0, 800374c <_printf_i+0x1bc>
 8003748:	1b40      	subs	r0, r0, r5
 800374a:	6060      	str	r0, [r4, #4]
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	2300      	movs	r3, #0
 8003752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003756:	e7a7      	b.n	80036a8 <_printf_i+0x118>
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	462a      	mov	r2, r5
 800375c:	4639      	mov	r1, r7
 800375e:	4630      	mov	r0, r6
 8003760:	47c0      	blx	r8
 8003762:	3001      	adds	r0, #1
 8003764:	d0aa      	beq.n	80036bc <_printf_i+0x12c>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	079b      	lsls	r3, r3, #30
 800376a:	d413      	bmi.n	8003794 <_printf_i+0x204>
 800376c:	68e0      	ldr	r0, [r4, #12]
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	4298      	cmp	r0, r3
 8003772:	bfb8      	it	lt
 8003774:	4618      	movlt	r0, r3
 8003776:	e7a3      	b.n	80036c0 <_printf_i+0x130>
 8003778:	2301      	movs	r3, #1
 800377a:	464a      	mov	r2, r9
 800377c:	4639      	mov	r1, r7
 800377e:	4630      	mov	r0, r6
 8003780:	47c0      	blx	r8
 8003782:	3001      	adds	r0, #1
 8003784:	d09a      	beq.n	80036bc <_printf_i+0x12c>
 8003786:	3501      	adds	r5, #1
 8003788:	68e3      	ldr	r3, [r4, #12]
 800378a:	9a03      	ldr	r2, [sp, #12]
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	42ab      	cmp	r3, r5
 8003790:	dcf2      	bgt.n	8003778 <_printf_i+0x1e8>
 8003792:	e7eb      	b.n	800376c <_printf_i+0x1dc>
 8003794:	2500      	movs	r5, #0
 8003796:	f104 0919 	add.w	r9, r4, #25
 800379a:	e7f5      	b.n	8003788 <_printf_i+0x1f8>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ac      	bne.n	80036fa <_printf_i+0x16a>
 80037a0:	7803      	ldrb	r3, [r0, #0]
 80037a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037aa:	e76c      	b.n	8003686 <_printf_i+0xf6>
 80037ac:	08003aa9 	.word	0x08003aa9
 80037b0:	08003aba 	.word	0x08003aba

080037b4 <memcpy>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	1e43      	subs	r3, r0, #1
 80037b8:	440a      	add	r2, r1
 80037ba:	4291      	cmp	r1, r2
 80037bc:	d100      	bne.n	80037c0 <memcpy+0xc>
 80037be:	bd10      	pop	{r4, pc}
 80037c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037c8:	e7f7      	b.n	80037ba <memcpy+0x6>

080037ca <memmove>:
 80037ca:	4288      	cmp	r0, r1
 80037cc:	b510      	push	{r4, lr}
 80037ce:	eb01 0302 	add.w	r3, r1, r2
 80037d2:	d807      	bhi.n	80037e4 <memmove+0x1a>
 80037d4:	1e42      	subs	r2, r0, #1
 80037d6:	4299      	cmp	r1, r3
 80037d8:	d00a      	beq.n	80037f0 <memmove+0x26>
 80037da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037e2:	e7f8      	b.n	80037d6 <memmove+0xc>
 80037e4:	4283      	cmp	r3, r0
 80037e6:	d9f5      	bls.n	80037d4 <memmove+0xa>
 80037e8:	1881      	adds	r1, r0, r2
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	42d3      	cmn	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memmove+0x28>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037fa:	e7f7      	b.n	80037ec <memmove+0x22>

080037fc <_free_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4605      	mov	r5, r0
 8003800:	2900      	cmp	r1, #0
 8003802:	d045      	beq.n	8003890 <_free_r+0x94>
 8003804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003808:	1f0c      	subs	r4, r1, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfb8      	it	lt
 800380e:	18e4      	addlt	r4, r4, r3
 8003810:	f000 f8d2 	bl	80039b8 <__malloc_lock>
 8003814:	4a1f      	ldr	r2, [pc, #124]	; (8003894 <_free_r+0x98>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	4610      	mov	r0, r2
 800381a:	b933      	cbnz	r3, 800382a <_free_r+0x2e>
 800381c:	6063      	str	r3, [r4, #4]
 800381e:	6014      	str	r4, [r2, #0]
 8003820:	4628      	mov	r0, r5
 8003822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003826:	f000 b8c8 	b.w	80039ba <__malloc_unlock>
 800382a:	42a3      	cmp	r3, r4
 800382c:	d90c      	bls.n	8003848 <_free_r+0x4c>
 800382e:	6821      	ldr	r1, [r4, #0]
 8003830:	1862      	adds	r2, r4, r1
 8003832:	4293      	cmp	r3, r2
 8003834:	bf04      	itt	eq
 8003836:	681a      	ldreq	r2, [r3, #0]
 8003838:	685b      	ldreq	r3, [r3, #4]
 800383a:	6063      	str	r3, [r4, #4]
 800383c:	bf04      	itt	eq
 800383e:	1852      	addeq	r2, r2, r1
 8003840:	6022      	streq	r2, [r4, #0]
 8003842:	6004      	str	r4, [r0, #0]
 8003844:	e7ec      	b.n	8003820 <_free_r+0x24>
 8003846:	4613      	mov	r3, r2
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	b10a      	cbz	r2, 8003850 <_free_r+0x54>
 800384c:	42a2      	cmp	r2, r4
 800384e:	d9fa      	bls.n	8003846 <_free_r+0x4a>
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	1858      	adds	r0, r3, r1
 8003854:	42a0      	cmp	r0, r4
 8003856:	d10b      	bne.n	8003870 <_free_r+0x74>
 8003858:	6820      	ldr	r0, [r4, #0]
 800385a:	4401      	add	r1, r0
 800385c:	1858      	adds	r0, r3, r1
 800385e:	4282      	cmp	r2, r0
 8003860:	6019      	str	r1, [r3, #0]
 8003862:	d1dd      	bne.n	8003820 <_free_r+0x24>
 8003864:	6810      	ldr	r0, [r2, #0]
 8003866:	6852      	ldr	r2, [r2, #4]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	4401      	add	r1, r0
 800386c:	6019      	str	r1, [r3, #0]
 800386e:	e7d7      	b.n	8003820 <_free_r+0x24>
 8003870:	d902      	bls.n	8003878 <_free_r+0x7c>
 8003872:	230c      	movs	r3, #12
 8003874:	602b      	str	r3, [r5, #0]
 8003876:	e7d3      	b.n	8003820 <_free_r+0x24>
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	1821      	adds	r1, r4, r0
 800387c:	428a      	cmp	r2, r1
 800387e:	bf04      	itt	eq
 8003880:	6811      	ldreq	r1, [r2, #0]
 8003882:	6852      	ldreq	r2, [r2, #4]
 8003884:	6062      	str	r2, [r4, #4]
 8003886:	bf04      	itt	eq
 8003888:	1809      	addeq	r1, r1, r0
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	605c      	str	r4, [r3, #4]
 800388e:	e7c7      	b.n	8003820 <_free_r+0x24>
 8003890:	bd38      	pop	{r3, r4, r5, pc}
 8003892:	bf00      	nop
 8003894:	20000090 	.word	0x20000090

08003898 <_malloc_r>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	1ccd      	adds	r5, r1, #3
 800389c:	f025 0503 	bic.w	r5, r5, #3
 80038a0:	3508      	adds	r5, #8
 80038a2:	2d0c      	cmp	r5, #12
 80038a4:	bf38      	it	cc
 80038a6:	250c      	movcc	r5, #12
 80038a8:	2d00      	cmp	r5, #0
 80038aa:	4606      	mov	r6, r0
 80038ac:	db01      	blt.n	80038b2 <_malloc_r+0x1a>
 80038ae:	42a9      	cmp	r1, r5
 80038b0:	d903      	bls.n	80038ba <_malloc_r+0x22>
 80038b2:	230c      	movs	r3, #12
 80038b4:	6033      	str	r3, [r6, #0]
 80038b6:	2000      	movs	r0, #0
 80038b8:	bd70      	pop	{r4, r5, r6, pc}
 80038ba:	f000 f87d 	bl	80039b8 <__malloc_lock>
 80038be:	4a21      	ldr	r2, [pc, #132]	; (8003944 <_malloc_r+0xac>)
 80038c0:	6814      	ldr	r4, [r2, #0]
 80038c2:	4621      	mov	r1, r4
 80038c4:	b991      	cbnz	r1, 80038ec <_malloc_r+0x54>
 80038c6:	4c20      	ldr	r4, [pc, #128]	; (8003948 <_malloc_r+0xb0>)
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	b91b      	cbnz	r3, 80038d4 <_malloc_r+0x3c>
 80038cc:	4630      	mov	r0, r6
 80038ce:	f000 f863 	bl	8003998 <_sbrk_r>
 80038d2:	6020      	str	r0, [r4, #0]
 80038d4:	4629      	mov	r1, r5
 80038d6:	4630      	mov	r0, r6
 80038d8:	f000 f85e 	bl	8003998 <_sbrk_r>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d124      	bne.n	800392a <_malloc_r+0x92>
 80038e0:	230c      	movs	r3, #12
 80038e2:	6033      	str	r3, [r6, #0]
 80038e4:	4630      	mov	r0, r6
 80038e6:	f000 f868 	bl	80039ba <__malloc_unlock>
 80038ea:	e7e4      	b.n	80038b6 <_malloc_r+0x1e>
 80038ec:	680b      	ldr	r3, [r1, #0]
 80038ee:	1b5b      	subs	r3, r3, r5
 80038f0:	d418      	bmi.n	8003924 <_malloc_r+0x8c>
 80038f2:	2b0b      	cmp	r3, #11
 80038f4:	d90f      	bls.n	8003916 <_malloc_r+0x7e>
 80038f6:	600b      	str	r3, [r1, #0]
 80038f8:	50cd      	str	r5, [r1, r3]
 80038fa:	18cc      	adds	r4, r1, r3
 80038fc:	4630      	mov	r0, r6
 80038fe:	f000 f85c 	bl	80039ba <__malloc_unlock>
 8003902:	f104 000b 	add.w	r0, r4, #11
 8003906:	1d23      	adds	r3, r4, #4
 8003908:	f020 0007 	bic.w	r0, r0, #7
 800390c:	1ac3      	subs	r3, r0, r3
 800390e:	d0d3      	beq.n	80038b8 <_malloc_r+0x20>
 8003910:	425a      	negs	r2, r3
 8003912:	50e2      	str	r2, [r4, r3]
 8003914:	e7d0      	b.n	80038b8 <_malloc_r+0x20>
 8003916:	428c      	cmp	r4, r1
 8003918:	684b      	ldr	r3, [r1, #4]
 800391a:	bf16      	itet	ne
 800391c:	6063      	strne	r3, [r4, #4]
 800391e:	6013      	streq	r3, [r2, #0]
 8003920:	460c      	movne	r4, r1
 8003922:	e7eb      	b.n	80038fc <_malloc_r+0x64>
 8003924:	460c      	mov	r4, r1
 8003926:	6849      	ldr	r1, [r1, #4]
 8003928:	e7cc      	b.n	80038c4 <_malloc_r+0x2c>
 800392a:	1cc4      	adds	r4, r0, #3
 800392c:	f024 0403 	bic.w	r4, r4, #3
 8003930:	42a0      	cmp	r0, r4
 8003932:	d005      	beq.n	8003940 <_malloc_r+0xa8>
 8003934:	1a21      	subs	r1, r4, r0
 8003936:	4630      	mov	r0, r6
 8003938:	f000 f82e 	bl	8003998 <_sbrk_r>
 800393c:	3001      	adds	r0, #1
 800393e:	d0cf      	beq.n	80038e0 <_malloc_r+0x48>
 8003940:	6025      	str	r5, [r4, #0]
 8003942:	e7db      	b.n	80038fc <_malloc_r+0x64>
 8003944:	20000090 	.word	0x20000090
 8003948:	20000094 	.word	0x20000094

0800394c <_realloc_r>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	4607      	mov	r7, r0
 8003950:	4614      	mov	r4, r2
 8003952:	460e      	mov	r6, r1
 8003954:	b921      	cbnz	r1, 8003960 <_realloc_r+0x14>
 8003956:	4611      	mov	r1, r2
 8003958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800395c:	f7ff bf9c 	b.w	8003898 <_malloc_r>
 8003960:	b922      	cbnz	r2, 800396c <_realloc_r+0x20>
 8003962:	f7ff ff4b 	bl	80037fc <_free_r>
 8003966:	4625      	mov	r5, r4
 8003968:	4628      	mov	r0, r5
 800396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800396c:	f000 f826 	bl	80039bc <_malloc_usable_size_r>
 8003970:	42a0      	cmp	r0, r4
 8003972:	d20f      	bcs.n	8003994 <_realloc_r+0x48>
 8003974:	4621      	mov	r1, r4
 8003976:	4638      	mov	r0, r7
 8003978:	f7ff ff8e 	bl	8003898 <_malloc_r>
 800397c:	4605      	mov	r5, r0
 800397e:	2800      	cmp	r0, #0
 8003980:	d0f2      	beq.n	8003968 <_realloc_r+0x1c>
 8003982:	4631      	mov	r1, r6
 8003984:	4622      	mov	r2, r4
 8003986:	f7ff ff15 	bl	80037b4 <memcpy>
 800398a:	4631      	mov	r1, r6
 800398c:	4638      	mov	r0, r7
 800398e:	f7ff ff35 	bl	80037fc <_free_r>
 8003992:	e7e9      	b.n	8003968 <_realloc_r+0x1c>
 8003994:	4635      	mov	r5, r6
 8003996:	e7e7      	b.n	8003968 <_realloc_r+0x1c>

08003998 <_sbrk_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4c06      	ldr	r4, [pc, #24]	; (80039b4 <_sbrk_r+0x1c>)
 800399c:	2300      	movs	r3, #0
 800399e:	4605      	mov	r5, r0
 80039a0:	4608      	mov	r0, r1
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	f7fd f934 	bl	8000c10 <_sbrk>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d102      	bne.n	80039b2 <_sbrk_r+0x1a>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	b103      	cbz	r3, 80039b2 <_sbrk_r+0x1a>
 80039b0:	602b      	str	r3, [r5, #0]
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	20000104 	.word	0x20000104

080039b8 <__malloc_lock>:
 80039b8:	4770      	bx	lr

080039ba <__malloc_unlock>:
 80039ba:	4770      	bx	lr

080039bc <_malloc_usable_size_r>:
 80039bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c0:	1f18      	subs	r0, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfbc      	itt	lt
 80039c6:	580b      	ldrlt	r3, [r1, r0]
 80039c8:	18c0      	addlt	r0, r0, r3
 80039ca:	4770      	bx	lr

080039cc <_init>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr

080039d8 <_fini>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr
