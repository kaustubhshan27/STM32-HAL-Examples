
CAN_loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a20  08003a20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a20  08003a20  00013a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a28  08003a28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08003aa0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003aa0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fef  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017f3  00000000  00000000  0002908f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f8  00000000  00000000  0002a888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  0002b080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000207db  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b6d  00000000  00000000  0004bf8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c489a  00000000  00000000  00052af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002320  00000000  00000000  00117410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003984 	.word	0x08003984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003984 	.word	0x08003984

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fb04 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f818 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8d4 	bl	8000738 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000590:	f000 f872 	bl	8000678 <MX_CAN1_Init>
  MX_UART4_Init();
 8000594:	f000 f8a6 	bl	80006e4 <MX_UART4_Init>

  /* USER CODE BEGIN 2 */
  can1_filter_config();
 8000598:	f000 f8e8 	bl	800076c <can1_filter_config>

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x38>)
 800059e:	f000 fd45 	bl	800102c <HAL_CAN_Start>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <main+0x2c>
  {
	  Error_Handler();
 80005a8:	f000 f98a 	bl	80008c0 <Error_Handler>
  }

  can1_tx();
 80005ac:	f000 f904 	bl	80007b8 <can1_tx>
  can1_rx();
 80005b0:	f000 f950 	bl	8000854 <can1_rx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x34>
 80005b6:	bf00      	nop
 80005b8:	200000d8 	.word	0x200000d8

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fdcc 	bl	8003168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xb4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <SystemClock_Config+0xb8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fa49 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f942 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fca4 	bl	8001fa4 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000662:	f000 f92d 	bl	80008c0 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_CAN1_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_CAN1_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]

  //Below fields present in CAN Bit Timing Register
  hcan1.Init.Prescaler = 16;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_CAN1_Init+0x64>)
 8000684:	2210      	movs	r2, #16
 8000686:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_CAN1_Init+0x64>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_CAN1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_CAN1_Init+0x64>)
 8000698:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800069c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_CAN1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]

  //Below fields present in CAN Master Control Register
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_CAN1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_CAN1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_CAN1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_CAN1_Init+0x64>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_CAN1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_CAN1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	775a      	strb	r2, [r3, #29]

  //changes mode of CAN from Sleep to Initialization
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_CAN1_Init+0x64>)
 80006ca:	f000 fad3 	bl	8000c74 <HAL_CAN_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f8f4 	bl	80008c0 <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000d8 	.word	0x200000d8
 80006e0:	40006400 	.word	0x40006400

080006e4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_UART4_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_UART4_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_UART4_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_UART4_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_UART4_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_UART4_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_UART4_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_UART4_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_UART4_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_UART4_Init+0x4c>)
 800071c:	f001 fe0e 	bl	800233c <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8cb 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000098 	.word	0x20000098
 8000734:	40004c00 	.word	0x40004c00

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_GPIO_Init+0x30>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <MX_GPIO_Init+0x30>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_GPIO_Init+0x30>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <can1_filter_config>:

/* USER CODE BEGIN 4 */
void can1_filter_config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 8000772:	2301      	movs	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <can1_filter_config+0x48>)
 800079c:	f000 fb66 	bl	8000e6c <HAL_CAN_ConfigFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <can1_filter_config+0x3e>
	{
		Error_Handler();
 80007a6:	f000 f88b 	bl	80008c0 <Error_Handler>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000d8 	.word	0x200000d8

080007b8 <can1_tx>:

void can1_tx(void)
{
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b096      	sub	sp, #88	; 0x58
 80007bc:	af00      	add	r7, sp, #0
	  the Tx mailbox (out of the 3) in which the message is added
	 */
	uint32_t txMailbox;

	//message to be sent
	uint8_t msg[5] = {'H', 'E', 'L', 'L', 'O'};
 80007be:	4a21      	ldr	r2, [pc, #132]	; (8000844 <can1_tx+0x8c>)
 80007c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007c8:	6018      	str	r0, [r3, #0]
 80007ca:	3304      	adds	r3, #4
 80007cc:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;				//Length of data to be sent in bytes
 80007ce:	2305      	movs	r3, #5
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
	TxHeader.StdId = 0x65D; 		//Standard CAN message 11-bit identifier, not extended identifier 29-bit identifier
 80007d2:	f240 635d 	movw	r3, #1629	; 0x65d
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.IDE = CAN_ID_STD;		//Type of identifier (standard or extended)
 80007d8:	2300      	movs	r3, #0
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
	TxHeader.RTR = CAN_RTR_DATA; 	//Sending data frame
 80007dc:	2300      	movs	r3, #0
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c

	//to add the Tx message to the mailbox and triggers transmission
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg, &txMailbox) != HAL_OK)
 80007e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80007e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <can1_tx+0x90>)
 80007ee:	f000 fc61 	bl	80010b4 <HAL_CAN_AddTxMessage>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <can1_tx+0x44>
	{
		Error_Handler();
 80007f8:	f000 f862 	bl	80008c0 <Error_Handler>
	}

	//polling for message to be sent
	while(HAL_CAN_IsTxMessagePending(&hcan1, txMailbox));
 80007fc:	bf00      	nop
 80007fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000800:	4619      	mov	r1, r3
 8000802:	4811      	ldr	r0, [pc, #68]	; (8000848 <can1_tx+0x90>)
 8000804:	f000 fd31 	bl	800126a <HAL_CAN_IsTxMessagePending>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f7      	bne.n	80007fe <can1_tx+0x46>

	//sending a message over UART after CAN message is transmitted
	char arr[50];
	sprintf((char *)arr, "Message Transmitted\n");
 800080e:	463b      	mov	r3, r7
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <can1_tx+0x94>)
 8000812:	461c      	mov	r4, r3
 8000814:	4615      	mov	r5, r2
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800081e:	6020      	str	r0, [r4, #0]
 8000820:	3404      	adds	r4, #4
 8000822:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart4, (uint8_t *)arr, (uint16_t) strlen(arr), HAL_MAX_DELAY); //blocking UART Tx
 8000824:	463b      	mov	r3, r7
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fcd2 	bl	80001d0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	4639      	mov	r1, r7
 8000832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <can1_tx+0x98>)
 8000838:	f001 fdcd 	bl	80023d6 <HAL_UART_Transmit>
}
 800083c:	bf00      	nop
 800083e:	3758      	adds	r7, #88	; 0x58
 8000840:	46bd      	mov	sp, r7
 8000842:	bdb0      	pop	{r4, r5, r7, pc}
 8000844:	080039b4 	.word	0x080039b4
 8000848:	200000d8 	.word	0x200000d8
 800084c:	0800399c 	.word	0x0800399c
 8000850:	20000098 	.word	0x20000098

08000854 <can1_rx>:

void can1_rx(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	; 0x58
 8000858:	af00      	add	r7, sp, #0
	 *	-> It is not mandatory. Since all the members of this structure will be filled by the Rx API.
	 */

	uint8_t rcvd_msg[5];			//to store received data

	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0)); //check if any message present in Rx FIFO. Returns the no. of mailboxes filled in the FIFO specified
 800085a:	bf00      	nop
 800085c:	2100      	movs	r1, #0
 800085e:	4815      	ldr	r0, [pc, #84]	; (80008b4 <can1_rx+0x60>)
 8000860:	f000 fe39 	bl	80014d6 <HAL_CAN_GetRxFifoFillLevel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f8      	bne.n	800085c <can1_rx+0x8>

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) //polling based reception
 800086a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000872:	2100      	movs	r1, #0
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <can1_rx+0x60>)
 8000876:	f000 fd1c 	bl	80012b2 <HAL_CAN_GetRxMessage>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <can1_rx+0x30>
	{
		Error_Handler();
 8000880:	f000 f81e 	bl	80008c0 <Error_Handler>
	}

	char arr[50];
	sprintf(arr, "Message Recived - %s\n", rcvd_msg);
 8000884:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000888:	463b      	mov	r3, r7
 800088a:	490b      	ldr	r1, [pc, #44]	; (80008b8 <can1_rx+0x64>)
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fc73 	bl	8003178 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t *)arr, (uint16_t) strlen(arr), HAL_MAX_DELAY); //blocking UART Tx
 8000892:	463b      	mov	r3, r7
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fc9b 	bl	80001d0 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	4639      	mov	r1, r7
 80008a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <can1_rx+0x68>)
 80008a6:	f001 fd96 	bl	80023d6 <HAL_UART_Transmit>
}
 80008aa:	bf00      	nop
 80008ac:	3758      	adds	r7, #88	; 0x58
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000d8 	.word	0x200000d8
 80008b8:	080039bc 	.word	0x080039bc
 80008bc:	20000098 	.word	0x20000098

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1);
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x4>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a19      	ldr	r2, [pc, #100]	; (800099c <HAL_CAN_MspInit+0x84>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d12c      	bne.n	8000994 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_CAN_MspInit+0x88>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_CAN_MspInit+0x88>)
 8000944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_CAN_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_CAN_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_CAN_MspInit+0x88>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_CAN_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000972:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000984:	2309      	movs	r3, #9
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_CAN_MspInit+0x8c>)
 8000990:	f000 fefe 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40006400 	.word	0x40006400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <HAL_UART_MspInit+0x94>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d133      	bne.n	8000a32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_UART_MspInit+0x98>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <HAL_UART_MspInit+0x98>)
 80009d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_UART_MspInit+0x98>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_UART_MspInit+0x98>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <HAL_UART_MspInit+0x98>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_UART_MspInit+0x98>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a02:	2303      	movs	r3, #3
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a12:	2308      	movs	r3, #8
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <HAL_UART_MspInit+0x9c>)
 8000a1e:	f000 feb7 	bl	8001790 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2034      	movs	r0, #52	; 0x34
 8000a28:	f000 fe59 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a2c:	2034      	movs	r0, #52	; 0x34
 8000a2e:	f000 fe72 	bl	8001716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40004c00 	.word	0x40004c00
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f8ca 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <UART4_IRQHandler+0x10>)
 8000aaa:	f001 fd2d 	bl	8002508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000098 	.word	0x20000098

08000ab8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x50>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x16>
		heap_end = &end;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <_sbrk+0x50>)
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <_sbrk+0x54>)
 8000acc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <_sbrk+0x50>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <_sbrk+0x50>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	466a      	mov	r2, sp
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d907      	bls.n	8000af2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ae2:	f002 fb17 	bl	8003114 <__errno>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	230c      	movs	r3, #12
 8000aea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af0:	e006      	b.n	8000b00 <_sbrk+0x48>
	}

	heap_end += incr;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <_sbrk+0x50>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <_sbrk+0x50>)
 8000afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000008c 	.word	0x2000008c
 8000b0c:	20000108 	.word	0x20000108

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <SystemInit+0x28>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <SystemInit+0x28>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SystemInit+0x28>)
 8000b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b42:	e003      	b.n	8000b4c <LoopCopyDataInit>

08000b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b4a:	3104      	adds	r1, #4

08000b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b54:	d3f6      	bcc.n	8000b44 <CopyDataInit>
  ldr  r2, =_sbss
 8000b56:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b58:	e002      	b.n	8000b60 <LoopFillZerobss>

08000b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b5c:	f842 3b04 	str.w	r3, [r2], #4

08000b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b64:	d3f9      	bcc.n	8000b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b66:	f7ff ffd3 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f002 fad9 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fd07 	bl	8000580 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b78:	08003a30 	.word	0x08003a30
  ldr  r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b80:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b84:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b88:	20000108 	.word	0x20000108

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 fd85 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe80 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fd9d 	bl	8001732 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 fd65 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000100 	.word	0x20000100

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000100 	.word	0x20000100

08000c74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e0ed      	b.n	8000e62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fe40 	bl	8000918 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0202 	bic.w	r2, r2, #2
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca8:	f7ff ffd8 	bl	8000c5c <HAL_GetTick>
 8000cac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cae:	e012      	b.n	8000cd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb0:	f7ff ffd4 	bl	8000c5c <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d90b      	bls.n	8000cd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2205      	movs	r2, #5
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e0c5      	b.n	8000e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1e5      	bne.n	8000cb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 0201 	orr.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf4:	f7ff ffb2 	bl	8000c5c <HAL_GetTick>
 8000cf8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cfa:	e012      	b.n	8000d22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cfc:	f7ff ffae 	bl	8000c5c <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b0a      	cmp	r3, #10
 8000d08:	d90b      	bls.n	8000d22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2205      	movs	r2, #5
 8000d1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e09f      	b.n	8000e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0e5      	beq.n	8000cfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7e1b      	ldrb	r3, [r3, #24]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d108      	bne.n	8000d4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e007      	b.n	8000d5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7e5b      	ldrb	r3, [r3, #25]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d108      	bne.n	8000d74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7e9b      	ldrb	r3, [r3, #26]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d108      	bne.n	8000d9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0220 	orr.w	r2, r2, #32
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e007      	b.n	8000dae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0220 	bic.w	r2, r2, #32
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7edb      	ldrb	r3, [r3, #27]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d108      	bne.n	8000dc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0210 	bic.w	r2, r2, #16
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e007      	b.n	8000dd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0210 	orr.w	r2, r2, #16
 8000dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7f1b      	ldrb	r3, [r3, #28]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d108      	bne.n	8000df2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0208 	orr.w	r2, r2, #8
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e007      	b.n	8000e02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0208 	bic.w	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7f5b      	ldrb	r3, [r3, #29]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d108      	bne.n	8000e1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 0204 	orr.w	r2, r2, #4
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e007      	b.n	8000e2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0204 	bic.w	r2, r2, #4
 8000e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	ea42 0103 	orr.w	r1, r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e84:	7cfb      	ldrb	r3, [r7, #19]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d003      	beq.n	8000e92 <HAL_CAN_ConfigFilter+0x26>
 8000e8a:	7cfb      	ldrb	r3, [r7, #19]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	f040 80be 	bne.w	800100e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e92:	4b65      	ldr	r3, [pc, #404]	; (8001028 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e94:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e9c:	f043 0201 	orr.w	r2, r3, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d123      	bne.n	8000f3c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3248      	adds	r2, #72	; 0x48
 8000f1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f32:	6979      	ldr	r1, [r7, #20]
 8000f34:	3348      	adds	r3, #72	; 0x48
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d122      	bne.n	8000f8a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3248      	adds	r2, #72	; 0x48
 8000f6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f80:	6979      	ldr	r1, [r7, #20]
 8000f82:	3348      	adds	r3, #72	; 0x48
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fa4:	e007      	b.n	8000fb6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d109      	bne.n	8000fd2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	401a      	ands	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fd0:	e007      	b.n	8000fe2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d107      	bne.n	8000ffa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001000:	f023 0201 	bic.w	r2, r3, #1
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e006      	b.n	800101c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
  }
}
 800101c:	4618      	mov	r0, r3
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40006400 	.word	0x40006400

0800102c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d12e      	bne.n	800109e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2202      	movs	r2, #2
 8001044:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001058:	f7ff fe00 	bl	8000c5c <HAL_GetTick>
 800105c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800105e:	e012      	b.n	8001086 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001060:	f7ff fdfc 	bl	8000c5c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d90b      	bls.n	8001086 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2205      	movs	r2, #5
 800107e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e012      	b.n	80010ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e5      	bne.n	8001060 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e006      	b.n	80010ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
  }
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d2:	7ffb      	ldrb	r3, [r7, #31]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d003      	beq.n	80010e0 <HAL_CAN_AddTxMessage+0x2c>
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	f040 80b8 	bne.w	8001250 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10a      	bne.n	8001100 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d105      	bne.n	8001100 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80a0 	beq.w	8001240 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	0e1b      	lsrs	r3, r3, #24
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d907      	bls.n	8001120 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e09e      	b.n	800125e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001120:	2201      	movs	r2, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	409a      	lsls	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800113c:	68f9      	ldr	r1, [r7, #12]
 800113e:	6809      	ldr	r1, [r1, #0]
 8001140:	431a      	orrs	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3318      	adds	r3, #24
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	440b      	add	r3, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e00f      	b.n	800116e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001158:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800115e:	68f9      	ldr	r1, [r7, #12]
 8001160:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001162:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3318      	adds	r3, #24
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	440b      	add	r3, r1
 800116c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3318      	adds	r3, #24
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	440b      	add	r3, r1
 800117e:	3304      	adds	r3, #4
 8001180:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	7d1b      	ldrb	r3, [r3, #20]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d111      	bne.n	80011ae <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3318      	adds	r3, #24
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	3304      	adds	r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	6811      	ldr	r1, [r2, #0]
 800119e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3318      	adds	r3, #24
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	440b      	add	r3, r1
 80011aa:	3304      	adds	r3, #4
 80011ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3307      	adds	r3, #7
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	061a      	lsls	r2, r3, #24
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3306      	adds	r3, #6
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	041b      	lsls	r3, r3, #16
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3305      	adds	r3, #5
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4313      	orrs	r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	3204      	adds	r2, #4
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	4610      	mov	r0, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	ea43 0200 	orr.w	r2, r3, r0
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3303      	adds	r3, #3
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	061a      	lsls	r2, r3, #24
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3302      	adds	r3, #2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3301      	adds	r3, #1
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4313      	orrs	r3, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	4610      	mov	r0, r2
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	6811      	ldr	r1, [r2, #0]
 800120c:	ea43 0200 	orr.w	r2, r3, r0
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	440b      	add	r3, r1
 8001216:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800121a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3318      	adds	r3, #24
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3318      	adds	r3, #24
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	440b      	add	r3, r1
 800123a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e00e      	b.n	800125e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e006      	b.n	800125e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
  }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d002      	beq.n	800128c <HAL_CAN_IsTxMessagePending+0x22>
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d10b      	bne.n	80012a4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	069b      	lsls	r3, r3, #26
 8001296:	401a      	ands	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	069b      	lsls	r3, r3, #26
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80012a0:	2301      	movs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012b2:	b480      	push	{r7}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d003      	beq.n	80012d6 <HAL_CAN_GetRxMessage+0x24>
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	f040 80f3 	bne.w	80014bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10e      	bne.n	80012fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d116      	bne.n	8001318 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0e7      	b.n	80014ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d107      	bne.n	8001318 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0d8      	b.n	80014ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	331b      	adds	r3, #27
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0204 	and.w	r2, r3, #4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10c      	bne.n	8001350 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	331b      	adds	r3, #27
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0d5b      	lsrs	r3, r3, #21
 8001346:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e00b      	b.n	8001368 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	331b      	adds	r3, #27
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	08db      	lsrs	r3, r3, #3
 8001360:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	331b      	adds	r3, #27
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0202 	and.w	r2, r3, #2
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	331b      	adds	r3, #27
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	3304      	adds	r3, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 020f 	and.w	r2, r3, #15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	331b      	adds	r3, #27
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	4413      	add	r3, r2
 80013a2:	3304      	adds	r3, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	331b      	adds	r3, #27
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	3304      	adds	r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0c1b      	lsrs	r3, r3, #16
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	0a1a      	lsrs	r2, r3, #8
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0c1a      	lsrs	r2, r3, #16
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3302      	adds	r3, #2
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0e1a      	lsrs	r2, r3, #24
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3303      	adds	r3, #3
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3304      	adds	r3, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0a1a      	lsrs	r2, r3, #8
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3305      	adds	r3, #5
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0c1a      	lsrs	r2, r3, #16
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3306      	adds	r3, #6
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0e1a      	lsrs	r2, r3, #24
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3307      	adds	r3, #7
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d108      	bne.n	80014a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0220 	orr.w	r2, r2, #32
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	e007      	b.n	80014b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0220 	orr.w	r2, r2, #32
 80014b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e006      	b.n	80014ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ea:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d002      	beq.n	80014f8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80014f2:	7afb      	ldrb	r3, [r7, #11]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d10f      	bne.n	8001518 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e005      	b.n	8001518 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001518:	68fb      	ldr	r3, [r7, #12]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff3e 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d004      	beq.n	8001768 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e00c      	b.n	8001782 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2205      	movs	r2, #5
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	e16b      	b.n	8001a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 815a 	bne.w	8001a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d00b      	beq.n	80017ea <HAL_GPIO_Init+0x5a>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017de:	2b11      	cmp	r3, #17
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0xfc>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d123      	bne.n	80018d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0203 	and.w	r2, r3, #3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80b4 	beq.w	8001a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_GPIO_Init+0x308>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_GPIO_Init+0x308>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_GPIO_Init+0x308>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_GPIO_Init+0x30c>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d02b      	beq.n	80019b6 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a50      	ldr	r2, [pc, #320]	; (8001aa4 <HAL_GPIO_Init+0x314>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d025      	beq.n	80019b2 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <HAL_GPIO_Init+0x318>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d01f      	beq.n	80019ae <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_GPIO_Init+0x31c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x21a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <HAL_GPIO_Init+0x320>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x216>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <HAL_GPIO_Init+0x324>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x212>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <HAL_GPIO_Init+0x328>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x20e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_GPIO_Init+0x32c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x20a>
 8001996:	2307      	movs	r3, #7
 8001998:	e00e      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 800199a:	2308      	movs	r3, #8
 800199c:	e00c      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 800199e:	2306      	movs	r3, #6
 80019a0:	e00a      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019a2:	2305      	movs	r3, #5
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019b6:	2300      	movs	r3, #0
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c8:	4934      	ldr	r1, [pc, #208]	; (8001a9c <HAL_GPIO_Init+0x30c>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a78:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	f67f ae90 	bls.w	80017ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3724      	adds	r7, #36	; 0x24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40021400 	.word	0x40021400
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40021c00 	.word	0x40021c00
 8001ac0:	40013c00 	.word	0x40013c00

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e25b      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d075      	beq.n	8001bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ae2:	4ba3      	ldr	r3, [pc, #652]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d00c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aee:	4ba0      	ldr	r3, [pc, #640]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d112      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afa:	4b9d      	ldr	r3, [pc, #628]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b06:	d10b      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	4b99      	ldr	r3, [pc, #612]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d05b      	beq.n	8001bcc <HAL_RCC_OscConfig+0x108>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d157      	bne.n	8001bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e236      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_OscConfig+0x74>
 8001b2a:	4b91      	ldr	r3, [pc, #580]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a90      	ldr	r2, [pc, #576]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e01d      	b.n	8001b74 <HAL_RCC_OscConfig+0xb0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b8b      	ldr	r3, [pc, #556]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a8a      	ldr	r2, [pc, #552]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a87      	ldr	r2, [pc, #540]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0xb0>
 8001b5c:	4b84      	ldr	r3, [pc, #528]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a83      	ldr	r2, [pc, #524]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b81      	ldr	r3, [pc, #516]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a80      	ldr	r2, [pc, #512]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f86e 	bl	8000c5c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f86a 	bl	8000c5c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1fb      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0xc0>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f85a 	bl	8000c5c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f856 	bl	8000c5c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1e7      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	4b6c      	ldr	r3, [pc, #432]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0xe8>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bda:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be6:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d11c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x152>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e1bb      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4952      	ldr	r1, [pc, #328]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e03a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <HAL_RCC_OscConfig+0x2b0>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f80f 	bl	8000c5c <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff f80b 	bl	8000c5c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e19c      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4940      	ldr	r1, [pc, #256]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <HAL_RCC_OscConfig+0x2b0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7fe ffee 	bl	8000c5c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c84:	f7fe ffea 	bl	8000c5c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e17b      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d030      	beq.n	8001d10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCC_OscConfig+0x2b4>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7fe ffce 	bl	8000c5c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7fe ffca 	bl	8000c5c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e15b      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x200>
 8001ce2:	e015      	b.n	8001d10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x2b4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7fe ffb7 	bl	8000c5c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7fe ffb3 	bl	8000c5c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e144      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a0 	beq.w	8001e5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10f      	bne.n	8001d4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_OscConfig+0x2b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d121      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_RCC_OscConfig+0x2b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_RCC_OscConfig+0x2b8>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7fe ff79 	bl	8000c5c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	e011      	b.n	8001d92 <HAL_RCC_OscConfig+0x2ce>
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	42470000 	.word	0x42470000
 8001d78:	42470e80 	.word	0x42470e80
 8001d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe ff6c 	bl	8000c5c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0fd      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d92:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x4d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
 8001da6:	4b7d      	ldr	r3, [pc, #500]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	4a7c      	ldr	r2, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6713      	str	r3, [r2, #112]	; 0x70
 8001db2:	e01c      	b.n	8001dee <HAL_RCC_OscConfig+0x32a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x312>
 8001dbc:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	4a76      	ldr	r2, [pc, #472]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc8:	4b74      	ldr	r3, [pc, #464]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a73      	ldr	r2, [pc, #460]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_OscConfig+0x32a>
 8001dd6:	4b71      	ldr	r3, [pc, #452]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	4a70      	ldr	r2, [pc, #448]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6713      	str	r3, [r2, #112]	; 0x70
 8001de2:	4b6e      	ldr	r3, [pc, #440]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a6d      	ldr	r2, [pc, #436]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d015      	beq.n	8001e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7fe ff31 	bl	8000c5c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe ff2d 	bl	8000c5c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0bc      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ee      	beq.n	8001dfe <HAL_RCC_OscConfig+0x33a>
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe ff1b 	bl	8000c5c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe ff17 	bl	8000c5c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0a6      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8092 	beq.w	8001f8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e68:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d05c      	beq.n	8001f2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d141      	bne.n	8001f00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe feeb 	bl	8000c5c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fee7 	bl	8000c5c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e078      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	019b      	lsls	r3, r3, #6
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	061b      	lsls	r3, r3, #24
 8001ecc:	4933      	ldr	r1, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fec0 	bl	8000c5c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe febc 	bl	8000c5c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e04d      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x41c>
 8001efe:	e045      	b.n	8001f8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_OscConfig+0x4dc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fea9 	bl	8000c5c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe fea5 	bl	8000c5c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e036      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x44a>
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e029      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_RCC_OscConfig+0x4d8>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d115      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f62:	4013      	ands	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d106      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	42470060 	.word	0x42470060

08001fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0cc      	b.n	8002152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b68      	ldr	r3, [pc, #416]	; (800215c <HAL_RCC_ClockConfig+0x1b8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d90c      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b8      	b.n	8002152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800201a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	494d      	ldr	r1, [pc, #308]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d044      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d119      	bne.n	8002082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e07f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d003      	beq.n	8002062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205e:	2b03      	cmp	r3, #3
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d109      	bne.n	8002082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e067      	b.n	8002152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f023 0203 	bic.w	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4934      	ldr	r1, [pc, #208]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002094:	f7fe fde2 	bl	8000c5c <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209c:	f7fe fdde 	bl	8000c5c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e04f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 020c 	and.w	r2, r3, #12
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d1eb      	bne.n	800209c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <HAL_RCC_ClockConfig+0x1b8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d20c      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e032      	b.n	8002152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4916      	ldr	r1, [pc, #88]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	490e      	ldr	r1, [pc, #56]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800212a:	f000 f821 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800212e:	4601      	mov	r1, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	fa21 f303 	lsr.w	r3, r1, r3
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fd42 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00
 8002160:	40023800 	.word	0x40023800
 8002164:	080039d4 	.word	0x080039d4
 8002168:	20000000 	.word	0x20000000
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002186:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b04      	cmp	r3, #4
 8002190:	d007      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x32>
 8002192:	2b08      	cmp	r3, #8
 8002194:	d008      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x38>
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 808d 	bne.w	80022b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800219e:	60bb      	str	r3, [r7, #8]
       break;
 80021a0:	e08c      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021a2:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80021a4:	60bb      	str	r3, [r7, #8]
      break;
 80021a6:	e089      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a8:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d023      	beq.n	8002206 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	f04f 0400 	mov.w	r4, #0
 80021c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	ea03 0501 	and.w	r5, r3, r1
 80021d4:	ea04 0602 	and.w	r6, r4, r2
 80021d8:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80021da:	fb02 f106 	mul.w	r1, r2, r6
 80021de:	2200      	movs	r2, #0
 80021e0:	fb02 f205 	mul.w	r2, r2, r5
 80021e4:	440a      	add	r2, r1
 80021e6:	493a      	ldr	r1, [pc, #232]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80021e8:	fba5 0101 	umull	r0, r1, r5, r1
 80021ec:	1853      	adds	r3, r2, r1
 80021ee:	4619      	mov	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f04f 0400 	mov.w	r4, #0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	f7fe f841 	bl	8000280 <__aeabi_uldivmod>
 80021fe:	4603      	mov	r3, r0
 8002200:	460c      	mov	r4, r1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e049      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	f04f 0400 	mov.w	r4, #0
 8002210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	ea03 0501 	and.w	r5, r3, r1
 800221c:	ea04 0602 	and.w	r6, r4, r2
 8002220:	4629      	mov	r1, r5
 8002222:	4632      	mov	r2, r6
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	f04f 0400 	mov.w	r4, #0
 800222c:	0154      	lsls	r4, r2, #5
 800222e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002232:	014b      	lsls	r3, r1, #5
 8002234:	4619      	mov	r1, r3
 8002236:	4622      	mov	r2, r4
 8002238:	1b49      	subs	r1, r1, r5
 800223a:	eb62 0206 	sbc.w	r2, r2, r6
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	f04f 0400 	mov.w	r4, #0
 8002246:	0194      	lsls	r4, r2, #6
 8002248:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800224c:	018b      	lsls	r3, r1, #6
 800224e:	1a5b      	subs	r3, r3, r1
 8002250:	eb64 0402 	sbc.w	r4, r4, r2
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	00e2      	lsls	r2, r4, #3
 800225e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002262:	00d9      	lsls	r1, r3, #3
 8002264:	460b      	mov	r3, r1
 8002266:	4614      	mov	r4, r2
 8002268:	195b      	adds	r3, r3, r5
 800226a:	eb44 0406 	adc.w	r4, r4, r6
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	02a2      	lsls	r2, r4, #10
 8002278:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800227c:	0299      	lsls	r1, r3, #10
 800227e:	460b      	mov	r3, r1
 8002280:	4614      	mov	r4, r2
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 0400 	mov.w	r4, #0
 800228c:	461a      	mov	r2, r3
 800228e:	4623      	mov	r3, r4
 8002290:	f7fd fff6 	bl	8000280 <__aeabi_uldivmod>
 8002294:	4603      	mov	r3, r0
 8002296:	460c      	mov	r4, r1
 8002298:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	3301      	adds	r3, #1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	60bb      	str	r3, [r7, #8]
      break;
 80022b4:	e002      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80022b8:	60bb      	str	r3, [r7, #8]
      break;
 80022ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022bc:	68bb      	ldr	r3, [r7, #8]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	017d7840 	.word	0x017d7840

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4601      	mov	r1, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4a03      	ldr	r2, [pc, #12]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40023800 	.word	0x40023800
 8002310:	080039e4 	.word	0x080039e4

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffdc 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800231c:	4601      	mov	r1, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0b5b      	lsrs	r3, r3, #13
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	080039e4 	.word	0x080039e4

0800233c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e03f      	b.n	80023ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fb20 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2224      	movs	r2, #36	; 0x24
 800236c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800237e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fb4b 	bl	8002a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af02      	add	r7, sp, #8
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	f040 8083 	bne.w	80024fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_UART_Transmit+0x2e>
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e07b      	b.n	8002500 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_UART_Transmit+0x40>
 8002412:	2302      	movs	r3, #2
 8002414:	e074      	b.n	8002500 <HAL_UART_Transmit+0x12a>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2221      	movs	r2, #33	; 0x21
 8002428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800242c:	f7fe fc16 	bl	8000c5c <HAL_GetTick>
 8002430:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002446:	e042      	b.n	80024ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245e:	d122      	bne.n	80024a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f96a 	bl	8002744 <UART_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e042      	b.n	8002500 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800248c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3302      	adds	r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	e017      	b.n	80024ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3301      	adds	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	e013      	b.n	80024ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2180      	movs	r1, #128	; 0x80
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f947 	bl	8002744 <UART_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e01f      	b.n	8002500 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60ba      	str	r2, [r7, #8]
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1b7      	bne.n	8002448 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2200      	movs	r2, #0
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f92e 	bl	8002744 <UART_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e006      	b.n	8002500 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_UART_IRQHandler+0x52>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9e0 	bl	8002918 <UART_Receive_IT>
      return;
 8002558:	e0d1      	b.n	80026fe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80b0 	beq.w	80026c2 <HAL_UART_IRQHandler+0x1ba>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_UART_IRQHandler+0x70>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80a5 	beq.w	80026c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_UART_IRQHandler+0x90>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_UART_IRQHandler+0xb0>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	f043 0202 	orr.w	r2, r3, #2
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_UART_IRQHandler+0xd0>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	f043 0204 	orr.w	r2, r3, #4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00f      	beq.n	8002602 <HAL_UART_IRQHandler+0xfa>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_UART_IRQHandler+0xee>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	f043 0208 	orr.w	r2, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d078      	beq.n	80026fc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_UART_IRQHandler+0x11c>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f97a 	bl	8002918 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_UART_IRQHandler+0x144>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d031      	beq.n	80026b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f8c3 	bl	80027d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d123      	bne.n	80026a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_UART_IRQHandler+0x1fc>)
 800267e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff f860 	bl	800174a <HAL_DMA_Abort_IT>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d016      	beq.n	80026be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800269a:	4610      	mov	r0, r2
 800269c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269e:	e00e      	b.n	80026be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f845 	bl	8002730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a6:	e00a      	b.n	80026be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f841 	bl	8002730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ae:	e006      	b.n	80026be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f83d 	bl	8002730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80026bc:	e01e      	b.n	80026fc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026be:	bf00      	nop
    return;
 80026c0:	e01c      	b.n	80026fc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_UART_IRQHandler+0x1d6>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8b0 	bl	800283c <UART_Transmit_IT>
    return;
 80026dc:	e00f      	b.n	80026fe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_UART_IRQHandler+0x1f6>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8f8 	bl	80028e8 <UART_EndTransmit_IT>
    return;
 80026f8:	bf00      	nop
 80026fa:	e000      	b.n	80026fe <HAL_UART_IRQHandler+0x1f6>
    return;
 80026fc:	bf00      	nop
  }
}
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08002815 	.word	0x08002815

08002708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002754:	e02c      	b.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275c:	d028      	beq.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x30>
 8002764:	f7fe fa7a 	bl	8000c5c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	429a      	cmp	r2, r3
 8002772:	d21d      	bcs.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002782:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e00f      	b.n	80027d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	429a      	cmp	r2, r3
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d0c3      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff ff7e 	bl	8002730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b21      	cmp	r3, #33	; 0x21
 800284e:	d144      	bne.n	80028da <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002858:	d11a      	bne.n	8002890 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800286e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	1c9a      	adds	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]
 8002882:	e00e      	b.n	80028a2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	621a      	str	r2, [r3, #32]
 800288e:	e008      	b.n	80028a2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	1c59      	adds	r1, r3, #1
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6211      	str	r1, [r2, #32]
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4619      	mov	r1, r3
 80028b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fefd 	bl	8002708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b22      	cmp	r3, #34	; 0x22
 800292a:	d171      	bne.n	8002a10 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002934:	d123      	bne.n	800297e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10e      	bne.n	8002962 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	1c9a      	adds	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
 8002960:	e029      	b.n	80029b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	b29b      	uxth	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
 800297c:	e01b      	b.n	80029b6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6858      	ldr	r0, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	1c59      	adds	r1, r3, #1
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6291      	str	r1, [r2, #40]	; 0x28
 8002996:	b2c2      	uxtb	r2, r0
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e00c      	b.n	80029b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	1c58      	adds	r0, r3, #1
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	6288      	str	r0, [r1, #40]	; 0x28
 80029ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4619      	mov	r1, r3
 80029c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d120      	bne.n	8002a0c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0220 	bic.w	r2, r2, #32
 80029d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fe8a 	bl	800271c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e002      	b.n	8002a12 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a5e:	f023 030c 	bic.w	r3, r3, #12
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8a:	f040 818b 	bne.w	8002da4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4ac1      	ldr	r2, [pc, #772]	; (8002d98 <UART_SetConfig+0x37c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0x88>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4abf      	ldr	r2, [pc, #764]	; (8002d9c <UART_SetConfig+0x380>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	f040 80bd 	bne.w	8002c1e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f7ff fc36 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8002aa8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	461d      	mov	r5, r3
 8002aae:	f04f 0600 	mov.w	r6, #0
 8002ab2:	46a8      	mov	r8, r5
 8002ab4:	46b1      	mov	r9, r6
 8002ab6:	eb18 0308 	adds.w	r3, r8, r8
 8002aba:	eb49 0409 	adc.w	r4, r9, r9
 8002abe:	4698      	mov	r8, r3
 8002ac0:	46a1      	mov	r9, r4
 8002ac2:	eb18 0805 	adds.w	r8, r8, r5
 8002ac6:	eb49 0906 	adc.w	r9, r9, r6
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ad6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ada:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ade:	4688      	mov	r8, r1
 8002ae0:	4691      	mov	r9, r2
 8002ae2:	eb18 0005 	adds.w	r0, r8, r5
 8002ae6:	eb49 0106 	adc.w	r1, r9, r6
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	461d      	mov	r5, r3
 8002af0:	f04f 0600 	mov.w	r6, #0
 8002af4:	196b      	adds	r3, r5, r5
 8002af6:	eb46 0406 	adc.w	r4, r6, r6
 8002afa:	461a      	mov	r2, r3
 8002afc:	4623      	mov	r3, r4
 8002afe:	f7fd fbbf 	bl	8000280 <__aeabi_uldivmod>
 8002b02:	4603      	mov	r3, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	461a      	mov	r2, r3
 8002b08:	4ba5      	ldr	r3, [pc, #660]	; (8002da0 <UART_SetConfig+0x384>)
 8002b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	461d      	mov	r5, r3
 8002b18:	f04f 0600 	mov.w	r6, #0
 8002b1c:	46a9      	mov	r9, r5
 8002b1e:	46b2      	mov	sl, r6
 8002b20:	eb19 0309 	adds.w	r3, r9, r9
 8002b24:	eb4a 040a 	adc.w	r4, sl, sl
 8002b28:	4699      	mov	r9, r3
 8002b2a:	46a2      	mov	sl, r4
 8002b2c:	eb19 0905 	adds.w	r9, r9, r5
 8002b30:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b48:	4689      	mov	r9, r1
 8002b4a:	4692      	mov	sl, r2
 8002b4c:	eb19 0005 	adds.w	r0, r9, r5
 8002b50:	eb4a 0106 	adc.w	r1, sl, r6
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	461d      	mov	r5, r3
 8002b5a:	f04f 0600 	mov.w	r6, #0
 8002b5e:	196b      	adds	r3, r5, r5
 8002b60:	eb46 0406 	adc.w	r4, r6, r6
 8002b64:	461a      	mov	r2, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	f7fd fb8a 	bl	8000280 <__aeabi_uldivmod>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <UART_SetConfig+0x384>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a86      	ldr	r2, [pc, #536]	; (8002da0 <UART_SetConfig+0x384>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b94:	4498      	add	r8, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	461d      	mov	r5, r3
 8002b9a:	f04f 0600 	mov.w	r6, #0
 8002b9e:	46a9      	mov	r9, r5
 8002ba0:	46b2      	mov	sl, r6
 8002ba2:	eb19 0309 	adds.w	r3, r9, r9
 8002ba6:	eb4a 040a 	adc.w	r4, sl, sl
 8002baa:	4699      	mov	r9, r3
 8002bac:	46a2      	mov	sl, r4
 8002bae:	eb19 0905 	adds.w	r9, r9, r5
 8002bb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bca:	4689      	mov	r9, r1
 8002bcc:	4692      	mov	sl, r2
 8002bce:	eb19 0005 	adds.w	r0, r9, r5
 8002bd2:	eb4a 0106 	adc.w	r1, sl, r6
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	461d      	mov	r5, r3
 8002bdc:	f04f 0600 	mov.w	r6, #0
 8002be0:	196b      	adds	r3, r5, r5
 8002be2:	eb46 0406 	adc.w	r4, r6, r6
 8002be6:	461a      	mov	r2, r3
 8002be8:	4623      	mov	r3, r4
 8002bea:	f7fd fb49 	bl	8000280 <__aeabi_uldivmod>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	460c      	mov	r4, r1
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <UART_SetConfig+0x384>)
 8002bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2164      	movs	r1, #100	; 0x64
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	3332      	adds	r3, #50	; 0x32
 8002c08:	4a65      	ldr	r2, [pc, #404]	; (8002da0 <UART_SetConfig+0x384>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	f003 0207 	and.w	r2, r3, #7
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4442      	add	r2, r8
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e26f      	b.n	80030fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c1e:	f7ff fb65 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002c22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	461d      	mov	r5, r3
 8002c28:	f04f 0600 	mov.w	r6, #0
 8002c2c:	46a8      	mov	r8, r5
 8002c2e:	46b1      	mov	r9, r6
 8002c30:	eb18 0308 	adds.w	r3, r8, r8
 8002c34:	eb49 0409 	adc.w	r4, r9, r9
 8002c38:	4698      	mov	r8, r3
 8002c3a:	46a1      	mov	r9, r4
 8002c3c:	eb18 0805 	adds.w	r8, r8, r5
 8002c40:	eb49 0906 	adc.w	r9, r9, r6
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c58:	4688      	mov	r8, r1
 8002c5a:	4691      	mov	r9, r2
 8002c5c:	eb18 0005 	adds.w	r0, r8, r5
 8002c60:	eb49 0106 	adc.w	r1, r9, r6
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	461d      	mov	r5, r3
 8002c6a:	f04f 0600 	mov.w	r6, #0
 8002c6e:	196b      	adds	r3, r5, r5
 8002c70:	eb46 0406 	adc.w	r4, r6, r6
 8002c74:	461a      	mov	r2, r3
 8002c76:	4623      	mov	r3, r4
 8002c78:	f7fd fb02 	bl	8000280 <__aeabi_uldivmod>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <UART_SetConfig+0x384>)
 8002c84:	fba3 2302 	umull	r2, r3, r3, r2
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	461d      	mov	r5, r3
 8002c92:	f04f 0600 	mov.w	r6, #0
 8002c96:	46a9      	mov	r9, r5
 8002c98:	46b2      	mov	sl, r6
 8002c9a:	eb19 0309 	adds.w	r3, r9, r9
 8002c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8002ca2:	4699      	mov	r9, r3
 8002ca4:	46a2      	mov	sl, r4
 8002ca6:	eb19 0905 	adds.w	r9, r9, r5
 8002caa:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cc2:	4689      	mov	r9, r1
 8002cc4:	4692      	mov	sl, r2
 8002cc6:	eb19 0005 	adds.w	r0, r9, r5
 8002cca:	eb4a 0106 	adc.w	r1, sl, r6
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	461d      	mov	r5, r3
 8002cd4:	f04f 0600 	mov.w	r6, #0
 8002cd8:	196b      	adds	r3, r5, r5
 8002cda:	eb46 0406 	adc.w	r4, r6, r6
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	f7fd facd 	bl	8000280 <__aeabi_uldivmod>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <UART_SetConfig+0x384>)
 8002cee:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2164      	movs	r1, #100	; 0x64
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	3332      	adds	r3, #50	; 0x32
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <UART_SetConfig+0x384>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d0e:	4498      	add	r8, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	461d      	mov	r5, r3
 8002d14:	f04f 0600 	mov.w	r6, #0
 8002d18:	46a9      	mov	r9, r5
 8002d1a:	46b2      	mov	sl, r6
 8002d1c:	eb19 0309 	adds.w	r3, r9, r9
 8002d20:	eb4a 040a 	adc.w	r4, sl, sl
 8002d24:	4699      	mov	r9, r3
 8002d26:	46a2      	mov	sl, r4
 8002d28:	eb19 0905 	adds.w	r9, r9, r5
 8002d2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d44:	4689      	mov	r9, r1
 8002d46:	4692      	mov	sl, r2
 8002d48:	eb19 0005 	adds.w	r0, r9, r5
 8002d4c:	eb4a 0106 	adc.w	r1, sl, r6
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	461d      	mov	r5, r3
 8002d56:	f04f 0600 	mov.w	r6, #0
 8002d5a:	196b      	adds	r3, r5, r5
 8002d5c:	eb46 0406 	adc.w	r4, r6, r6
 8002d60:	461a      	mov	r2, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	f7fd fa8c 	bl	8000280 <__aeabi_uldivmod>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <UART_SetConfig+0x384>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <UART_SetConfig+0x384>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4442      	add	r2, r8
 8002d94:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d96:	e1b2      	b.n	80030fe <UART_SetConfig+0x6e2>
 8002d98:	40011000 	.word	0x40011000
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4ad7      	ldr	r2, [pc, #860]	; (8003108 <UART_SetConfig+0x6ec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d005      	beq.n	8002dba <UART_SetConfig+0x39e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4ad6      	ldr	r2, [pc, #856]	; (800310c <UART_SetConfig+0x6f0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	f040 80d1 	bne.w	8002f5c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dba:	f7ff faab 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8002dbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	469a      	mov	sl, r3
 8002dc4:	f04f 0b00 	mov.w	fp, #0
 8002dc8:	46d0      	mov	r8, sl
 8002dca:	46d9      	mov	r9, fp
 8002dcc:	eb18 0308 	adds.w	r3, r8, r8
 8002dd0:	eb49 0409 	adc.w	r4, r9, r9
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	46a1      	mov	r9, r4
 8002dd8:	eb18 080a 	adds.w	r8, r8, sl
 8002ddc:	eb49 090b 	adc.w	r9, r9, fp
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002dec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002df0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002df4:	4688      	mov	r8, r1
 8002df6:	4691      	mov	r9, r2
 8002df8:	eb1a 0508 	adds.w	r5, sl, r8
 8002dfc:	eb4b 0609 	adc.w	r6, fp, r9
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	f04f 0400 	mov.w	r4, #0
 8002e12:	0094      	lsls	r4, r2, #2
 8002e14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e18:	008b      	lsls	r3, r1, #2
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	4628      	mov	r0, r5
 8002e20:	4631      	mov	r1, r6
 8002e22:	f7fd fa2d 	bl	8000280 <__aeabi_uldivmod>
 8002e26:	4603      	mov	r3, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4bb8      	ldr	r3, [pc, #736]	; (8003110 <UART_SetConfig+0x6f4>)
 8002e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	469b      	mov	fp, r3
 8002e3c:	f04f 0c00 	mov.w	ip, #0
 8002e40:	46d9      	mov	r9, fp
 8002e42:	46e2      	mov	sl, ip
 8002e44:	eb19 0309 	adds.w	r3, r9, r9
 8002e48:	eb4a 040a 	adc.w	r4, sl, sl
 8002e4c:	4699      	mov	r9, r3
 8002e4e:	46a2      	mov	sl, r4
 8002e50:	eb19 090b 	adds.w	r9, r9, fp
 8002e54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e6c:	4689      	mov	r9, r1
 8002e6e:	4692      	mov	sl, r2
 8002e70:	eb1b 0509 	adds.w	r5, fp, r9
 8002e74:	eb4c 060a 	adc.w	r6, ip, sl
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f04f 0400 	mov.w	r4, #0
 8002e8a:	0094      	lsls	r4, r2, #2
 8002e8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e90:	008b      	lsls	r3, r1, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	4623      	mov	r3, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	4631      	mov	r1, r6
 8002e9a:	f7fd f9f1 	bl	8000280 <__aeabi_uldivmod>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b9a      	ldr	r3, [pc, #616]	; (8003110 <UART_SetConfig+0x6f4>)
 8002ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2164      	movs	r1, #100	; 0x64
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	3332      	adds	r3, #50	; 0x32
 8002eb8:	4a95      	ldr	r2, [pc, #596]	; (8003110 <UART_SetConfig+0x6f4>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	4498      	add	r8, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	469b      	mov	fp, r3
 8002eca:	f04f 0c00 	mov.w	ip, #0
 8002ece:	46d9      	mov	r9, fp
 8002ed0:	46e2      	mov	sl, ip
 8002ed2:	eb19 0309 	adds.w	r3, r9, r9
 8002ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eda:	4699      	mov	r9, r3
 8002edc:	46a2      	mov	sl, r4
 8002ede:	eb19 090b 	adds.w	r9, r9, fp
 8002ee2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ee6:	f04f 0100 	mov.w	r1, #0
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002efa:	4689      	mov	r9, r1
 8002efc:	4692      	mov	sl, r2
 8002efe:	eb1b 0509 	adds.w	r5, fp, r9
 8002f02:	eb4c 060a 	adc.w	r6, ip, sl
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f04f 0400 	mov.w	r4, #0
 8002f18:	0094      	lsls	r4, r2, #2
 8002f1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f1e:	008b      	lsls	r3, r1, #2
 8002f20:	461a      	mov	r2, r3
 8002f22:	4623      	mov	r3, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	4631      	mov	r1, r6
 8002f28:	f7fd f9aa 	bl	8000280 <__aeabi_uldivmod>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	460c      	mov	r4, r1
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b77      	ldr	r3, [pc, #476]	; (8003110 <UART_SetConfig+0x6f4>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	2164      	movs	r1, #100	; 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	3332      	adds	r3, #50	; 0x32
 8002f46:	4a72      	ldr	r2, [pc, #456]	; (8003110 <UART_SetConfig+0x6f4>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4442      	add	r2, r8
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	e0d0      	b.n	80030fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7ff f9c6 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002f60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	469a      	mov	sl, r3
 8002f66:	f04f 0b00 	mov.w	fp, #0
 8002f6a:	46d0      	mov	r8, sl
 8002f6c:	46d9      	mov	r9, fp
 8002f6e:	eb18 0308 	adds.w	r3, r8, r8
 8002f72:	eb49 0409 	adc.w	r4, r9, r9
 8002f76:	4698      	mov	r8, r3
 8002f78:	46a1      	mov	r9, r4
 8002f7a:	eb18 080a 	adds.w	r8, r8, sl
 8002f7e:	eb49 090b 	adc.w	r9, r9, fp
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f96:	4688      	mov	r8, r1
 8002f98:	4691      	mov	r9, r2
 8002f9a:	eb1a 0508 	adds.w	r5, sl, r8
 8002f9e:	eb4b 0609 	adc.w	r6, fp, r9
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	f04f 0400 	mov.w	r4, #0
 8002fb4:	0094      	lsls	r4, r2, #2
 8002fb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fba:	008b      	lsls	r3, r1, #2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	f7fd f95c 	bl	8000280 <__aeabi_uldivmod>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b50      	ldr	r3, [pc, #320]	; (8003110 <UART_SetConfig+0x6f4>)
 8002fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	469b      	mov	fp, r3
 8002fde:	f04f 0c00 	mov.w	ip, #0
 8002fe2:	46d9      	mov	r9, fp
 8002fe4:	46e2      	mov	sl, ip
 8002fe6:	eb19 0309 	adds.w	r3, r9, r9
 8002fea:	eb4a 040a 	adc.w	r4, sl, sl
 8002fee:	4699      	mov	r9, r3
 8002ff0:	46a2      	mov	sl, r4
 8002ff2:	eb19 090b 	adds.w	r9, r9, fp
 8002ff6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800300a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800300e:	4689      	mov	r9, r1
 8003010:	4692      	mov	sl, r2
 8003012:	eb1b 0509 	adds.w	r5, fp, r9
 8003016:	eb4c 060a 	adc.w	r6, ip, sl
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4619      	mov	r1, r3
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	f04f 0400 	mov.w	r4, #0
 800302c:	0094      	lsls	r4, r2, #2
 800302e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	4628      	mov	r0, r5
 800303a:	4631      	mov	r1, r6
 800303c:	f7fd f920 	bl	8000280 <__aeabi_uldivmod>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	461a      	mov	r2, r3
 8003046:	4b32      	ldr	r3, [pc, #200]	; (8003110 <UART_SetConfig+0x6f4>)
 8003048:	fba3 1302 	umull	r1, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2164      	movs	r1, #100	; 0x64
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	4a2d      	ldr	r2, [pc, #180]	; (8003110 <UART_SetConfig+0x6f4>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003066:	4498      	add	r8, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	469b      	mov	fp, r3
 800306c:	f04f 0c00 	mov.w	ip, #0
 8003070:	46d9      	mov	r9, fp
 8003072:	46e2      	mov	sl, ip
 8003074:	eb19 0309 	adds.w	r3, r9, r9
 8003078:	eb4a 040a 	adc.w	r4, sl, sl
 800307c:	4699      	mov	r9, r3
 800307e:	46a2      	mov	sl, r4
 8003080:	eb19 090b 	adds.w	r9, r9, fp
 8003084:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003094:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003098:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800309c:	4689      	mov	r9, r1
 800309e:	4692      	mov	sl, r2
 80030a0:	eb1b 0509 	adds.w	r5, fp, r9
 80030a4:	eb4c 060a 	adc.w	r6, ip, sl
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4619      	mov	r1, r3
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	f04f 0400 	mov.w	r4, #0
 80030ba:	0094      	lsls	r4, r2, #2
 80030bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030c0:	008b      	lsls	r3, r1, #2
 80030c2:	461a      	mov	r2, r3
 80030c4:	4623      	mov	r3, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	4631      	mov	r1, r6
 80030ca:	f7fd f8d9 	bl	8000280 <__aeabi_uldivmod>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <UART_SetConfig+0x6f4>)
 80030d6:	fba3 1302 	umull	r1, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2164      	movs	r1, #100	; 0x64
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a09      	ldr	r2, [pc, #36]	; (8003110 <UART_SetConfig+0x6f4>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4442      	add	r2, r8
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	e7ff      	b.n	80030fe <UART_SetConfig+0x6e2>
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003108:	40011000 	.word	0x40011000
 800310c:	40011400 	.word	0x40011400
 8003110:	51eb851f 	.word	0x51eb851f

08003114 <__errno>:
 8003114:	4b01      	ldr	r3, [pc, #4]	; (800311c <__errno+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	4e0d      	ldr	r6, [pc, #52]	; (8003158 <__libc_init_array+0x38>)
 8003124:	4c0d      	ldr	r4, [pc, #52]	; (800315c <__libc_init_array+0x3c>)
 8003126:	1ba4      	subs	r4, r4, r6
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	2500      	movs	r5, #0
 800312c:	42a5      	cmp	r5, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	4e0b      	ldr	r6, [pc, #44]	; (8003160 <__libc_init_array+0x40>)
 8003132:	4c0c      	ldr	r4, [pc, #48]	; (8003164 <__libc_init_array+0x44>)
 8003134:	f000 fc26 	bl	8003984 <_init>
 8003138:	1ba4      	subs	r4, r4, r6
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	2500      	movs	r5, #0
 800313e:	42a5      	cmp	r5, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003148:	4798      	blx	r3
 800314a:	3501      	adds	r5, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003152:	4798      	blx	r3
 8003154:	3501      	adds	r5, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	08003a28 	.word	0x08003a28
 800315c:	08003a28 	.word	0x08003a28
 8003160:	08003a28 	.word	0x08003a28
 8003164:	08003a2c 	.word	0x08003a2c

08003168 <memset>:
 8003168:	4402      	add	r2, r0
 800316a:	4603      	mov	r3, r0
 800316c:	4293      	cmp	r3, r2
 800316e:	d100      	bne.n	8003172 <memset+0xa>
 8003170:	4770      	bx	lr
 8003172:	f803 1b01 	strb.w	r1, [r3], #1
 8003176:	e7f9      	b.n	800316c <memset+0x4>

08003178 <siprintf>:
 8003178:	b40e      	push	{r1, r2, r3}
 800317a:	b500      	push	{lr}
 800317c:	b09c      	sub	sp, #112	; 0x70
 800317e:	ab1d      	add	r3, sp, #116	; 0x74
 8003180:	9002      	str	r0, [sp, #8]
 8003182:	9006      	str	r0, [sp, #24]
 8003184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003188:	4809      	ldr	r0, [pc, #36]	; (80031b0 <siprintf+0x38>)
 800318a:	9107      	str	r1, [sp, #28]
 800318c:	9104      	str	r1, [sp, #16]
 800318e:	4909      	ldr	r1, [pc, #36]	; (80031b4 <siprintf+0x3c>)
 8003190:	f853 2b04 	ldr.w	r2, [r3], #4
 8003194:	9105      	str	r1, [sp, #20]
 8003196:	6800      	ldr	r0, [r0, #0]
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	a902      	add	r1, sp, #8
 800319c:	f000 f866 	bl	800326c <_svfiprintf_r>
 80031a0:	9b02      	ldr	r3, [sp, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	b01c      	add	sp, #112	; 0x70
 80031a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ac:	b003      	add	sp, #12
 80031ae:	4770      	bx	lr
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	ffff0208 	.word	0xffff0208

080031b8 <__ssputs_r>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	688e      	ldr	r6, [r1, #8]
 80031be:	429e      	cmp	r6, r3
 80031c0:	4682      	mov	sl, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	4690      	mov	r8, r2
 80031c6:	4699      	mov	r9, r3
 80031c8:	d837      	bhi.n	800323a <__ssputs_r+0x82>
 80031ca:	898a      	ldrh	r2, [r1, #12]
 80031cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d0:	d031      	beq.n	8003236 <__ssputs_r+0x7e>
 80031d2:	6825      	ldr	r5, [r4, #0]
 80031d4:	6909      	ldr	r1, [r1, #16]
 80031d6:	1a6f      	subs	r7, r5, r1
 80031d8:	6965      	ldr	r5, [r4, #20]
 80031da:	2302      	movs	r3, #2
 80031dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80031e4:	f109 0301 	add.w	r3, r9, #1
 80031e8:	443b      	add	r3, r7
 80031ea:	429d      	cmp	r5, r3
 80031ec:	bf38      	it	cc
 80031ee:	461d      	movcc	r5, r3
 80031f0:	0553      	lsls	r3, r2, #21
 80031f2:	d530      	bpl.n	8003256 <__ssputs_r+0x9e>
 80031f4:	4629      	mov	r1, r5
 80031f6:	f000 fb2b 	bl	8003850 <_malloc_r>
 80031fa:	4606      	mov	r6, r0
 80031fc:	b950      	cbnz	r0, 8003214 <__ssputs_r+0x5c>
 80031fe:	230c      	movs	r3, #12
 8003200:	f8ca 3000 	str.w	r3, [sl]
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	463a      	mov	r2, r7
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	f000 faa8 	bl	800376c <memcpy>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	6126      	str	r6, [r4, #16]
 800322a:	6165      	str	r5, [r4, #20]
 800322c:	443e      	add	r6, r7
 800322e:	1bed      	subs	r5, r5, r7
 8003230:	6026      	str	r6, [r4, #0]
 8003232:	60a5      	str	r5, [r4, #8]
 8003234:	464e      	mov	r6, r9
 8003236:	454e      	cmp	r6, r9
 8003238:	d900      	bls.n	800323c <__ssputs_r+0x84>
 800323a:	464e      	mov	r6, r9
 800323c:	4632      	mov	r2, r6
 800323e:	4641      	mov	r1, r8
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	f000 fa9e 	bl	8003782 <memmove>
 8003246:	68a3      	ldr	r3, [r4, #8]
 8003248:	1b9b      	subs	r3, r3, r6
 800324a:	60a3      	str	r3, [r4, #8]
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	441e      	add	r6, r3
 8003250:	6026      	str	r6, [r4, #0]
 8003252:	2000      	movs	r0, #0
 8003254:	e7dc      	b.n	8003210 <__ssputs_r+0x58>
 8003256:	462a      	mov	r2, r5
 8003258:	f000 fb54 	bl	8003904 <_realloc_r>
 800325c:	4606      	mov	r6, r0
 800325e:	2800      	cmp	r0, #0
 8003260:	d1e2      	bne.n	8003228 <__ssputs_r+0x70>
 8003262:	6921      	ldr	r1, [r4, #16]
 8003264:	4650      	mov	r0, sl
 8003266:	f000 faa5 	bl	80037b4 <_free_r>
 800326a:	e7c8      	b.n	80031fe <__ssputs_r+0x46>

0800326c <_svfiprintf_r>:
 800326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003270:	461d      	mov	r5, r3
 8003272:	898b      	ldrh	r3, [r1, #12]
 8003274:	061f      	lsls	r7, r3, #24
 8003276:	b09d      	sub	sp, #116	; 0x74
 8003278:	4680      	mov	r8, r0
 800327a:	460c      	mov	r4, r1
 800327c:	4616      	mov	r6, r2
 800327e:	d50f      	bpl.n	80032a0 <_svfiprintf_r+0x34>
 8003280:	690b      	ldr	r3, [r1, #16]
 8003282:	b96b      	cbnz	r3, 80032a0 <_svfiprintf_r+0x34>
 8003284:	2140      	movs	r1, #64	; 0x40
 8003286:	f000 fae3 	bl	8003850 <_malloc_r>
 800328a:	6020      	str	r0, [r4, #0]
 800328c:	6120      	str	r0, [r4, #16]
 800328e:	b928      	cbnz	r0, 800329c <_svfiprintf_r+0x30>
 8003290:	230c      	movs	r3, #12
 8003292:	f8c8 3000 	str.w	r3, [r8]
 8003296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800329a:	e0c8      	b.n	800342e <_svfiprintf_r+0x1c2>
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	6163      	str	r3, [r4, #20]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9309      	str	r3, [sp, #36]	; 0x24
 80032a4:	2320      	movs	r3, #32
 80032a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032aa:	2330      	movs	r3, #48	; 0x30
 80032ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032b0:	9503      	str	r5, [sp, #12]
 80032b2:	f04f 0b01 	mov.w	fp, #1
 80032b6:	4637      	mov	r7, r6
 80032b8:	463d      	mov	r5, r7
 80032ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032be:	b10b      	cbz	r3, 80032c4 <_svfiprintf_r+0x58>
 80032c0:	2b25      	cmp	r3, #37	; 0x25
 80032c2:	d13e      	bne.n	8003342 <_svfiprintf_r+0xd6>
 80032c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80032c8:	d00b      	beq.n	80032e2 <_svfiprintf_r+0x76>
 80032ca:	4653      	mov	r3, sl
 80032cc:	4632      	mov	r2, r6
 80032ce:	4621      	mov	r1, r4
 80032d0:	4640      	mov	r0, r8
 80032d2:	f7ff ff71 	bl	80031b8 <__ssputs_r>
 80032d6:	3001      	adds	r0, #1
 80032d8:	f000 80a4 	beq.w	8003424 <_svfiprintf_r+0x1b8>
 80032dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032de:	4453      	add	r3, sl
 80032e0:	9309      	str	r3, [sp, #36]	; 0x24
 80032e2:	783b      	ldrb	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 809d 	beq.w	8003424 <_svfiprintf_r+0x1b8>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	9307      	str	r3, [sp, #28]
 80032f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032fc:	931a      	str	r3, [sp, #104]	; 0x68
 80032fe:	462f      	mov	r7, r5
 8003300:	2205      	movs	r2, #5
 8003302:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003306:	4850      	ldr	r0, [pc, #320]	; (8003448 <_svfiprintf_r+0x1dc>)
 8003308:	f7fc ff6a 	bl	80001e0 <memchr>
 800330c:	9b04      	ldr	r3, [sp, #16]
 800330e:	b9d0      	cbnz	r0, 8003346 <_svfiprintf_r+0xda>
 8003310:	06d9      	lsls	r1, r3, #27
 8003312:	bf44      	itt	mi
 8003314:	2220      	movmi	r2, #32
 8003316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800331a:	071a      	lsls	r2, r3, #28
 800331c:	bf44      	itt	mi
 800331e:	222b      	movmi	r2, #43	; 0x2b
 8003320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003324:	782a      	ldrb	r2, [r5, #0]
 8003326:	2a2a      	cmp	r2, #42	; 0x2a
 8003328:	d015      	beq.n	8003356 <_svfiprintf_r+0xea>
 800332a:	9a07      	ldr	r2, [sp, #28]
 800332c:	462f      	mov	r7, r5
 800332e:	2000      	movs	r0, #0
 8003330:	250a      	movs	r5, #10
 8003332:	4639      	mov	r1, r7
 8003334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003338:	3b30      	subs	r3, #48	; 0x30
 800333a:	2b09      	cmp	r3, #9
 800333c:	d94d      	bls.n	80033da <_svfiprintf_r+0x16e>
 800333e:	b1b8      	cbz	r0, 8003370 <_svfiprintf_r+0x104>
 8003340:	e00f      	b.n	8003362 <_svfiprintf_r+0xf6>
 8003342:	462f      	mov	r7, r5
 8003344:	e7b8      	b.n	80032b8 <_svfiprintf_r+0x4c>
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <_svfiprintf_r+0x1dc>)
 8003348:	1a80      	subs	r0, r0, r2
 800334a:	fa0b f000 	lsl.w	r0, fp, r0
 800334e:	4318      	orrs	r0, r3
 8003350:	9004      	str	r0, [sp, #16]
 8003352:	463d      	mov	r5, r7
 8003354:	e7d3      	b.n	80032fe <_svfiprintf_r+0x92>
 8003356:	9a03      	ldr	r2, [sp, #12]
 8003358:	1d11      	adds	r1, r2, #4
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	9103      	str	r1, [sp, #12]
 800335e:	2a00      	cmp	r2, #0
 8003360:	db01      	blt.n	8003366 <_svfiprintf_r+0xfa>
 8003362:	9207      	str	r2, [sp, #28]
 8003364:	e004      	b.n	8003370 <_svfiprintf_r+0x104>
 8003366:	4252      	negs	r2, r2
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	9207      	str	r2, [sp, #28]
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	783b      	ldrb	r3, [r7, #0]
 8003372:	2b2e      	cmp	r3, #46	; 0x2e
 8003374:	d10c      	bne.n	8003390 <_svfiprintf_r+0x124>
 8003376:	787b      	ldrb	r3, [r7, #1]
 8003378:	2b2a      	cmp	r3, #42	; 0x2a
 800337a:	d133      	bne.n	80033e4 <_svfiprintf_r+0x178>
 800337c:	9b03      	ldr	r3, [sp, #12]
 800337e:	1d1a      	adds	r2, r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	9203      	str	r2, [sp, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	bfb8      	it	lt
 8003388:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800338c:	3702      	adds	r7, #2
 800338e:	9305      	str	r3, [sp, #20]
 8003390:	4d2e      	ldr	r5, [pc, #184]	; (800344c <_svfiprintf_r+0x1e0>)
 8003392:	7839      	ldrb	r1, [r7, #0]
 8003394:	2203      	movs	r2, #3
 8003396:	4628      	mov	r0, r5
 8003398:	f7fc ff22 	bl	80001e0 <memchr>
 800339c:	b138      	cbz	r0, 80033ae <_svfiprintf_r+0x142>
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	1b40      	subs	r0, r0, r5
 80033a2:	fa03 f000 	lsl.w	r0, r3, r0
 80033a6:	9b04      	ldr	r3, [sp, #16]
 80033a8:	4303      	orrs	r3, r0
 80033aa:	3701      	adds	r7, #1
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	7839      	ldrb	r1, [r7, #0]
 80033b0:	4827      	ldr	r0, [pc, #156]	; (8003450 <_svfiprintf_r+0x1e4>)
 80033b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033b6:	2206      	movs	r2, #6
 80033b8:	1c7e      	adds	r6, r7, #1
 80033ba:	f7fc ff11 	bl	80001e0 <memchr>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d038      	beq.n	8003434 <_svfiprintf_r+0x1c8>
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <_svfiprintf_r+0x1e8>)
 80033c4:	bb13      	cbnz	r3, 800340c <_svfiprintf_r+0x1a0>
 80033c6:	9b03      	ldr	r3, [sp, #12]
 80033c8:	3307      	adds	r3, #7
 80033ca:	f023 0307 	bic.w	r3, r3, #7
 80033ce:	3308      	adds	r3, #8
 80033d0:	9303      	str	r3, [sp, #12]
 80033d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d4:	444b      	add	r3, r9
 80033d6:	9309      	str	r3, [sp, #36]	; 0x24
 80033d8:	e76d      	b.n	80032b6 <_svfiprintf_r+0x4a>
 80033da:	fb05 3202 	mla	r2, r5, r2, r3
 80033de:	2001      	movs	r0, #1
 80033e0:	460f      	mov	r7, r1
 80033e2:	e7a6      	b.n	8003332 <_svfiprintf_r+0xc6>
 80033e4:	2300      	movs	r3, #0
 80033e6:	3701      	adds	r7, #1
 80033e8:	9305      	str	r3, [sp, #20]
 80033ea:	4619      	mov	r1, r3
 80033ec:	250a      	movs	r5, #10
 80033ee:	4638      	mov	r0, r7
 80033f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033f4:	3a30      	subs	r2, #48	; 0x30
 80033f6:	2a09      	cmp	r2, #9
 80033f8:	d903      	bls.n	8003402 <_svfiprintf_r+0x196>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0c8      	beq.n	8003390 <_svfiprintf_r+0x124>
 80033fe:	9105      	str	r1, [sp, #20]
 8003400:	e7c6      	b.n	8003390 <_svfiprintf_r+0x124>
 8003402:	fb05 2101 	mla	r1, r5, r1, r2
 8003406:	2301      	movs	r3, #1
 8003408:	4607      	mov	r7, r0
 800340a:	e7f0      	b.n	80033ee <_svfiprintf_r+0x182>
 800340c:	ab03      	add	r3, sp, #12
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4622      	mov	r2, r4
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <_svfiprintf_r+0x1ec>)
 8003414:	a904      	add	r1, sp, #16
 8003416:	4640      	mov	r0, r8
 8003418:	f3af 8000 	nop.w
 800341c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003420:	4681      	mov	r9, r0
 8003422:	d1d6      	bne.n	80033d2 <_svfiprintf_r+0x166>
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	065b      	lsls	r3, r3, #25
 8003428:	f53f af35 	bmi.w	8003296 <_svfiprintf_r+0x2a>
 800342c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800342e:	b01d      	add	sp, #116	; 0x74
 8003430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003434:	ab03      	add	r3, sp, #12
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	4622      	mov	r2, r4
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <_svfiprintf_r+0x1ec>)
 800343c:	a904      	add	r1, sp, #16
 800343e:	4640      	mov	r0, r8
 8003440:	f000 f882 	bl	8003548 <_printf_i>
 8003444:	e7ea      	b.n	800341c <_svfiprintf_r+0x1b0>
 8003446:	bf00      	nop
 8003448:	080039ec 	.word	0x080039ec
 800344c:	080039f2 	.word	0x080039f2
 8003450:	080039f6 	.word	0x080039f6
 8003454:	00000000 	.word	0x00000000
 8003458:	080031b9 	.word	0x080031b9

0800345c <_printf_common>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	4691      	mov	r9, r2
 8003462:	461f      	mov	r7, r3
 8003464:	688a      	ldr	r2, [r1, #8]
 8003466:	690b      	ldr	r3, [r1, #16]
 8003468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800346c:	4293      	cmp	r3, r2
 800346e:	bfb8      	it	lt
 8003470:	4613      	movlt	r3, r2
 8003472:	f8c9 3000 	str.w	r3, [r9]
 8003476:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800347a:	4606      	mov	r6, r0
 800347c:	460c      	mov	r4, r1
 800347e:	b112      	cbz	r2, 8003486 <_printf_common+0x2a>
 8003480:	3301      	adds	r3, #1
 8003482:	f8c9 3000 	str.w	r3, [r9]
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	0699      	lsls	r1, r3, #26
 800348a:	bf42      	ittt	mi
 800348c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003490:	3302      	addmi	r3, #2
 8003492:	f8c9 3000 	strmi.w	r3, [r9]
 8003496:	6825      	ldr	r5, [r4, #0]
 8003498:	f015 0506 	ands.w	r5, r5, #6
 800349c:	d107      	bne.n	80034ae <_printf_common+0x52>
 800349e:	f104 0a19 	add.w	sl, r4, #25
 80034a2:	68e3      	ldr	r3, [r4, #12]
 80034a4:	f8d9 2000 	ldr.w	r2, [r9]
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	42ab      	cmp	r3, r5
 80034ac:	dc28      	bgt.n	8003500 <_printf_common+0xa4>
 80034ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	3300      	adds	r3, #0
 80034b6:	bf18      	it	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	0692      	lsls	r2, r2, #26
 80034bc:	d42d      	bmi.n	800351a <_printf_common+0xbe>
 80034be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034c2:	4639      	mov	r1, r7
 80034c4:	4630      	mov	r0, r6
 80034c6:	47c0      	blx	r8
 80034c8:	3001      	adds	r0, #1
 80034ca:	d020      	beq.n	800350e <_printf_common+0xb2>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	68e5      	ldr	r5, [r4, #12]
 80034d0:	f8d9 2000 	ldr.w	r2, [r9]
 80034d4:	f003 0306 	and.w	r3, r3, #6
 80034d8:	2b04      	cmp	r3, #4
 80034da:	bf08      	it	eq
 80034dc:	1aad      	subeq	r5, r5, r2
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	6922      	ldr	r2, [r4, #16]
 80034e2:	bf0c      	ite	eq
 80034e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e8:	2500      	movne	r5, #0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfc4      	itt	gt
 80034ee:	1a9b      	subgt	r3, r3, r2
 80034f0:	18ed      	addgt	r5, r5, r3
 80034f2:	f04f 0900 	mov.w	r9, #0
 80034f6:	341a      	adds	r4, #26
 80034f8:	454d      	cmp	r5, r9
 80034fa:	d11a      	bne.n	8003532 <_printf_common+0xd6>
 80034fc:	2000      	movs	r0, #0
 80034fe:	e008      	b.n	8003512 <_printf_common+0xb6>
 8003500:	2301      	movs	r3, #1
 8003502:	4652      	mov	r2, sl
 8003504:	4639      	mov	r1, r7
 8003506:	4630      	mov	r0, r6
 8003508:	47c0      	blx	r8
 800350a:	3001      	adds	r0, #1
 800350c:	d103      	bne.n	8003516 <_printf_common+0xba>
 800350e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003516:	3501      	adds	r5, #1
 8003518:	e7c3      	b.n	80034a2 <_printf_common+0x46>
 800351a:	18e1      	adds	r1, r4, r3
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	2030      	movs	r0, #48	; 0x30
 8003520:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003524:	4422      	add	r2, r4
 8003526:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800352a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800352e:	3302      	adds	r3, #2
 8003530:	e7c5      	b.n	80034be <_printf_common+0x62>
 8003532:	2301      	movs	r3, #1
 8003534:	4622      	mov	r2, r4
 8003536:	4639      	mov	r1, r7
 8003538:	4630      	mov	r0, r6
 800353a:	47c0      	blx	r8
 800353c:	3001      	adds	r0, #1
 800353e:	d0e6      	beq.n	800350e <_printf_common+0xb2>
 8003540:	f109 0901 	add.w	r9, r9, #1
 8003544:	e7d8      	b.n	80034f8 <_printf_common+0x9c>
	...

08003548 <_printf_i>:
 8003548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800354c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003550:	460c      	mov	r4, r1
 8003552:	7e09      	ldrb	r1, [r1, #24]
 8003554:	b085      	sub	sp, #20
 8003556:	296e      	cmp	r1, #110	; 0x6e
 8003558:	4617      	mov	r7, r2
 800355a:	4606      	mov	r6, r0
 800355c:	4698      	mov	r8, r3
 800355e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003560:	f000 80b3 	beq.w	80036ca <_printf_i+0x182>
 8003564:	d822      	bhi.n	80035ac <_printf_i+0x64>
 8003566:	2963      	cmp	r1, #99	; 0x63
 8003568:	d036      	beq.n	80035d8 <_printf_i+0x90>
 800356a:	d80a      	bhi.n	8003582 <_printf_i+0x3a>
 800356c:	2900      	cmp	r1, #0
 800356e:	f000 80b9 	beq.w	80036e4 <_printf_i+0x19c>
 8003572:	2958      	cmp	r1, #88	; 0x58
 8003574:	f000 8083 	beq.w	800367e <_printf_i+0x136>
 8003578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800357c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003580:	e032      	b.n	80035e8 <_printf_i+0xa0>
 8003582:	2964      	cmp	r1, #100	; 0x64
 8003584:	d001      	beq.n	800358a <_printf_i+0x42>
 8003586:	2969      	cmp	r1, #105	; 0x69
 8003588:	d1f6      	bne.n	8003578 <_printf_i+0x30>
 800358a:	6820      	ldr	r0, [r4, #0]
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	0605      	lsls	r5, r0, #24
 8003590:	f103 0104 	add.w	r1, r3, #4
 8003594:	d52a      	bpl.n	80035ec <_printf_i+0xa4>
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6011      	str	r1, [r2, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	da03      	bge.n	80035a6 <_printf_i+0x5e>
 800359e:	222d      	movs	r2, #45	; 0x2d
 80035a0:	425b      	negs	r3, r3
 80035a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035a6:	486f      	ldr	r0, [pc, #444]	; (8003764 <_printf_i+0x21c>)
 80035a8:	220a      	movs	r2, #10
 80035aa:	e039      	b.n	8003620 <_printf_i+0xd8>
 80035ac:	2973      	cmp	r1, #115	; 0x73
 80035ae:	f000 809d 	beq.w	80036ec <_printf_i+0x1a4>
 80035b2:	d808      	bhi.n	80035c6 <_printf_i+0x7e>
 80035b4:	296f      	cmp	r1, #111	; 0x6f
 80035b6:	d020      	beq.n	80035fa <_printf_i+0xb2>
 80035b8:	2970      	cmp	r1, #112	; 0x70
 80035ba:	d1dd      	bne.n	8003578 <_printf_i+0x30>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	f043 0320 	orr.w	r3, r3, #32
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	e003      	b.n	80035ce <_printf_i+0x86>
 80035c6:	2975      	cmp	r1, #117	; 0x75
 80035c8:	d017      	beq.n	80035fa <_printf_i+0xb2>
 80035ca:	2978      	cmp	r1, #120	; 0x78
 80035cc:	d1d4      	bne.n	8003578 <_printf_i+0x30>
 80035ce:	2378      	movs	r3, #120	; 0x78
 80035d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035d4:	4864      	ldr	r0, [pc, #400]	; (8003768 <_printf_i+0x220>)
 80035d6:	e055      	b.n	8003684 <_printf_i+0x13c>
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	1d19      	adds	r1, r3, #4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6011      	str	r1, [r2, #0]
 80035e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035e8:	2301      	movs	r3, #1
 80035ea:	e08c      	b.n	8003706 <_printf_i+0x1be>
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6011      	str	r1, [r2, #0]
 80035f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035f4:	bf18      	it	ne
 80035f6:	b21b      	sxthne	r3, r3
 80035f8:	e7cf      	b.n	800359a <_printf_i+0x52>
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	6825      	ldr	r5, [r4, #0]
 80035fe:	1d18      	adds	r0, r3, #4
 8003600:	6010      	str	r0, [r2, #0]
 8003602:	0628      	lsls	r0, r5, #24
 8003604:	d501      	bpl.n	800360a <_printf_i+0xc2>
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e002      	b.n	8003610 <_printf_i+0xc8>
 800360a:	0668      	lsls	r0, r5, #25
 800360c:	d5fb      	bpl.n	8003606 <_printf_i+0xbe>
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	4854      	ldr	r0, [pc, #336]	; (8003764 <_printf_i+0x21c>)
 8003612:	296f      	cmp	r1, #111	; 0x6f
 8003614:	bf14      	ite	ne
 8003616:	220a      	movne	r2, #10
 8003618:	2208      	moveq	r2, #8
 800361a:	2100      	movs	r1, #0
 800361c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003620:	6865      	ldr	r5, [r4, #4]
 8003622:	60a5      	str	r5, [r4, #8]
 8003624:	2d00      	cmp	r5, #0
 8003626:	f2c0 8095 	blt.w	8003754 <_printf_i+0x20c>
 800362a:	6821      	ldr	r1, [r4, #0]
 800362c:	f021 0104 	bic.w	r1, r1, #4
 8003630:	6021      	str	r1, [r4, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13d      	bne.n	80036b2 <_printf_i+0x16a>
 8003636:	2d00      	cmp	r5, #0
 8003638:	f040 808e 	bne.w	8003758 <_printf_i+0x210>
 800363c:	4665      	mov	r5, ip
 800363e:	2a08      	cmp	r2, #8
 8003640:	d10b      	bne.n	800365a <_printf_i+0x112>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	07db      	lsls	r3, r3, #31
 8003646:	d508      	bpl.n	800365a <_printf_i+0x112>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	6862      	ldr	r2, [r4, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	bfde      	ittt	le
 8003650:	2330      	movle	r3, #48	; 0x30
 8003652:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003656:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800365a:	ebac 0305 	sub.w	r3, ip, r5
 800365e:	6123      	str	r3, [r4, #16]
 8003660:	f8cd 8000 	str.w	r8, [sp]
 8003664:	463b      	mov	r3, r7
 8003666:	aa03      	add	r2, sp, #12
 8003668:	4621      	mov	r1, r4
 800366a:	4630      	mov	r0, r6
 800366c:	f7ff fef6 	bl	800345c <_printf_common>
 8003670:	3001      	adds	r0, #1
 8003672:	d14d      	bne.n	8003710 <_printf_i+0x1c8>
 8003674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003678:	b005      	add	sp, #20
 800367a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800367e:	4839      	ldr	r0, [pc, #228]	; (8003764 <_printf_i+0x21c>)
 8003680:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	6821      	ldr	r1, [r4, #0]
 8003688:	1d1d      	adds	r5, r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6015      	str	r5, [r2, #0]
 800368e:	060a      	lsls	r2, r1, #24
 8003690:	d50b      	bpl.n	80036aa <_printf_i+0x162>
 8003692:	07ca      	lsls	r2, r1, #31
 8003694:	bf44      	itt	mi
 8003696:	f041 0120 	orrmi.w	r1, r1, #32
 800369a:	6021      	strmi	r1, [r4, #0]
 800369c:	b91b      	cbnz	r3, 80036a6 <_printf_i+0x15e>
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	f022 0220 	bic.w	r2, r2, #32
 80036a4:	6022      	str	r2, [r4, #0]
 80036a6:	2210      	movs	r2, #16
 80036a8:	e7b7      	b.n	800361a <_printf_i+0xd2>
 80036aa:	064d      	lsls	r5, r1, #25
 80036ac:	bf48      	it	mi
 80036ae:	b29b      	uxthmi	r3, r3
 80036b0:	e7ef      	b.n	8003692 <_printf_i+0x14a>
 80036b2:	4665      	mov	r5, ip
 80036b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80036b8:	fb02 3311 	mls	r3, r2, r1, r3
 80036bc:	5cc3      	ldrb	r3, [r0, r3]
 80036be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036c2:	460b      	mov	r3, r1
 80036c4:	2900      	cmp	r1, #0
 80036c6:	d1f5      	bne.n	80036b4 <_printf_i+0x16c>
 80036c8:	e7b9      	b.n	800363e <_printf_i+0xf6>
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	6825      	ldr	r5, [r4, #0]
 80036ce:	6961      	ldr	r1, [r4, #20]
 80036d0:	1d18      	adds	r0, r3, #4
 80036d2:	6010      	str	r0, [r2, #0]
 80036d4:	0628      	lsls	r0, r5, #24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	d501      	bpl.n	80036de <_printf_i+0x196>
 80036da:	6019      	str	r1, [r3, #0]
 80036dc:	e002      	b.n	80036e4 <_printf_i+0x19c>
 80036de:	066a      	lsls	r2, r5, #25
 80036e0:	d5fb      	bpl.n	80036da <_printf_i+0x192>
 80036e2:	8019      	strh	r1, [r3, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	6123      	str	r3, [r4, #16]
 80036e8:	4665      	mov	r5, ip
 80036ea:	e7b9      	b.n	8003660 <_printf_i+0x118>
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	1d19      	adds	r1, r3, #4
 80036f0:	6011      	str	r1, [r2, #0]
 80036f2:	681d      	ldr	r5, [r3, #0]
 80036f4:	6862      	ldr	r2, [r4, #4]
 80036f6:	2100      	movs	r1, #0
 80036f8:	4628      	mov	r0, r5
 80036fa:	f7fc fd71 	bl	80001e0 <memchr>
 80036fe:	b108      	cbz	r0, 8003704 <_printf_i+0x1bc>
 8003700:	1b40      	subs	r0, r0, r5
 8003702:	6060      	str	r0, [r4, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	2300      	movs	r3, #0
 800370a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370e:	e7a7      	b.n	8003660 <_printf_i+0x118>
 8003710:	6923      	ldr	r3, [r4, #16]
 8003712:	462a      	mov	r2, r5
 8003714:	4639      	mov	r1, r7
 8003716:	4630      	mov	r0, r6
 8003718:	47c0      	blx	r8
 800371a:	3001      	adds	r0, #1
 800371c:	d0aa      	beq.n	8003674 <_printf_i+0x12c>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	079b      	lsls	r3, r3, #30
 8003722:	d413      	bmi.n	800374c <_printf_i+0x204>
 8003724:	68e0      	ldr	r0, [r4, #12]
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	4298      	cmp	r0, r3
 800372a:	bfb8      	it	lt
 800372c:	4618      	movlt	r0, r3
 800372e:	e7a3      	b.n	8003678 <_printf_i+0x130>
 8003730:	2301      	movs	r3, #1
 8003732:	464a      	mov	r2, r9
 8003734:	4639      	mov	r1, r7
 8003736:	4630      	mov	r0, r6
 8003738:	47c0      	blx	r8
 800373a:	3001      	adds	r0, #1
 800373c:	d09a      	beq.n	8003674 <_printf_i+0x12c>
 800373e:	3501      	adds	r5, #1
 8003740:	68e3      	ldr	r3, [r4, #12]
 8003742:	9a03      	ldr	r2, [sp, #12]
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	42ab      	cmp	r3, r5
 8003748:	dcf2      	bgt.n	8003730 <_printf_i+0x1e8>
 800374a:	e7eb      	b.n	8003724 <_printf_i+0x1dc>
 800374c:	2500      	movs	r5, #0
 800374e:	f104 0919 	add.w	r9, r4, #25
 8003752:	e7f5      	b.n	8003740 <_printf_i+0x1f8>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ac      	bne.n	80036b2 <_printf_i+0x16a>
 8003758:	7803      	ldrb	r3, [r0, #0]
 800375a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800375e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003762:	e76c      	b.n	800363e <_printf_i+0xf6>
 8003764:	080039fd 	.word	0x080039fd
 8003768:	08003a0e 	.word	0x08003a0e

0800376c <memcpy>:
 800376c:	b510      	push	{r4, lr}
 800376e:	1e43      	subs	r3, r0, #1
 8003770:	440a      	add	r2, r1
 8003772:	4291      	cmp	r1, r2
 8003774:	d100      	bne.n	8003778 <memcpy+0xc>
 8003776:	bd10      	pop	{r4, pc}
 8003778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800377c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003780:	e7f7      	b.n	8003772 <memcpy+0x6>

08003782 <memmove>:
 8003782:	4288      	cmp	r0, r1
 8003784:	b510      	push	{r4, lr}
 8003786:	eb01 0302 	add.w	r3, r1, r2
 800378a:	d807      	bhi.n	800379c <memmove+0x1a>
 800378c:	1e42      	subs	r2, r0, #1
 800378e:	4299      	cmp	r1, r3
 8003790:	d00a      	beq.n	80037a8 <memmove+0x26>
 8003792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003796:	f802 4f01 	strb.w	r4, [r2, #1]!
 800379a:	e7f8      	b.n	800378e <memmove+0xc>
 800379c:	4283      	cmp	r3, r0
 800379e:	d9f5      	bls.n	800378c <memmove+0xa>
 80037a0:	1881      	adds	r1, r0, r2
 80037a2:	1ad2      	subs	r2, r2, r3
 80037a4:	42d3      	cmn	r3, r2
 80037a6:	d100      	bne.n	80037aa <memmove+0x28>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037b2:	e7f7      	b.n	80037a4 <memmove+0x22>

080037b4 <_free_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	4605      	mov	r5, r0
 80037b8:	2900      	cmp	r1, #0
 80037ba:	d045      	beq.n	8003848 <_free_r+0x94>
 80037bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c0:	1f0c      	subs	r4, r1, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bfb8      	it	lt
 80037c6:	18e4      	addlt	r4, r4, r3
 80037c8:	f000 f8d2 	bl	8003970 <__malloc_lock>
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <_free_r+0x98>)
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	4610      	mov	r0, r2
 80037d2:	b933      	cbnz	r3, 80037e2 <_free_r+0x2e>
 80037d4:	6063      	str	r3, [r4, #4]
 80037d6:	6014      	str	r4, [r2, #0]
 80037d8:	4628      	mov	r0, r5
 80037da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037de:	f000 b8c8 	b.w	8003972 <__malloc_unlock>
 80037e2:	42a3      	cmp	r3, r4
 80037e4:	d90c      	bls.n	8003800 <_free_r+0x4c>
 80037e6:	6821      	ldr	r1, [r4, #0]
 80037e8:	1862      	adds	r2, r4, r1
 80037ea:	4293      	cmp	r3, r2
 80037ec:	bf04      	itt	eq
 80037ee:	681a      	ldreq	r2, [r3, #0]
 80037f0:	685b      	ldreq	r3, [r3, #4]
 80037f2:	6063      	str	r3, [r4, #4]
 80037f4:	bf04      	itt	eq
 80037f6:	1852      	addeq	r2, r2, r1
 80037f8:	6022      	streq	r2, [r4, #0]
 80037fa:	6004      	str	r4, [r0, #0]
 80037fc:	e7ec      	b.n	80037d8 <_free_r+0x24>
 80037fe:	4613      	mov	r3, r2
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	b10a      	cbz	r2, 8003808 <_free_r+0x54>
 8003804:	42a2      	cmp	r2, r4
 8003806:	d9fa      	bls.n	80037fe <_free_r+0x4a>
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	1858      	adds	r0, r3, r1
 800380c:	42a0      	cmp	r0, r4
 800380e:	d10b      	bne.n	8003828 <_free_r+0x74>
 8003810:	6820      	ldr	r0, [r4, #0]
 8003812:	4401      	add	r1, r0
 8003814:	1858      	adds	r0, r3, r1
 8003816:	4282      	cmp	r2, r0
 8003818:	6019      	str	r1, [r3, #0]
 800381a:	d1dd      	bne.n	80037d8 <_free_r+0x24>
 800381c:	6810      	ldr	r0, [r2, #0]
 800381e:	6852      	ldr	r2, [r2, #4]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	4401      	add	r1, r0
 8003824:	6019      	str	r1, [r3, #0]
 8003826:	e7d7      	b.n	80037d8 <_free_r+0x24>
 8003828:	d902      	bls.n	8003830 <_free_r+0x7c>
 800382a:	230c      	movs	r3, #12
 800382c:	602b      	str	r3, [r5, #0]
 800382e:	e7d3      	b.n	80037d8 <_free_r+0x24>
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	1821      	adds	r1, r4, r0
 8003834:	428a      	cmp	r2, r1
 8003836:	bf04      	itt	eq
 8003838:	6811      	ldreq	r1, [r2, #0]
 800383a:	6852      	ldreq	r2, [r2, #4]
 800383c:	6062      	str	r2, [r4, #4]
 800383e:	bf04      	itt	eq
 8003840:	1809      	addeq	r1, r1, r0
 8003842:	6021      	streq	r1, [r4, #0]
 8003844:	605c      	str	r4, [r3, #4]
 8003846:	e7c7      	b.n	80037d8 <_free_r+0x24>
 8003848:	bd38      	pop	{r3, r4, r5, pc}
 800384a:	bf00      	nop
 800384c:	20000090 	.word	0x20000090

08003850 <_malloc_r>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	1ccd      	adds	r5, r1, #3
 8003854:	f025 0503 	bic.w	r5, r5, #3
 8003858:	3508      	adds	r5, #8
 800385a:	2d0c      	cmp	r5, #12
 800385c:	bf38      	it	cc
 800385e:	250c      	movcc	r5, #12
 8003860:	2d00      	cmp	r5, #0
 8003862:	4606      	mov	r6, r0
 8003864:	db01      	blt.n	800386a <_malloc_r+0x1a>
 8003866:	42a9      	cmp	r1, r5
 8003868:	d903      	bls.n	8003872 <_malloc_r+0x22>
 800386a:	230c      	movs	r3, #12
 800386c:	6033      	str	r3, [r6, #0]
 800386e:	2000      	movs	r0, #0
 8003870:	bd70      	pop	{r4, r5, r6, pc}
 8003872:	f000 f87d 	bl	8003970 <__malloc_lock>
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <_malloc_r+0xac>)
 8003878:	6814      	ldr	r4, [r2, #0]
 800387a:	4621      	mov	r1, r4
 800387c:	b991      	cbnz	r1, 80038a4 <_malloc_r+0x54>
 800387e:	4c20      	ldr	r4, [pc, #128]	; (8003900 <_malloc_r+0xb0>)
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	b91b      	cbnz	r3, 800388c <_malloc_r+0x3c>
 8003884:	4630      	mov	r0, r6
 8003886:	f000 f863 	bl	8003950 <_sbrk_r>
 800388a:	6020      	str	r0, [r4, #0]
 800388c:	4629      	mov	r1, r5
 800388e:	4630      	mov	r0, r6
 8003890:	f000 f85e 	bl	8003950 <_sbrk_r>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d124      	bne.n	80038e2 <_malloc_r+0x92>
 8003898:	230c      	movs	r3, #12
 800389a:	6033      	str	r3, [r6, #0]
 800389c:	4630      	mov	r0, r6
 800389e:	f000 f868 	bl	8003972 <__malloc_unlock>
 80038a2:	e7e4      	b.n	800386e <_malloc_r+0x1e>
 80038a4:	680b      	ldr	r3, [r1, #0]
 80038a6:	1b5b      	subs	r3, r3, r5
 80038a8:	d418      	bmi.n	80038dc <_malloc_r+0x8c>
 80038aa:	2b0b      	cmp	r3, #11
 80038ac:	d90f      	bls.n	80038ce <_malloc_r+0x7e>
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	50cd      	str	r5, [r1, r3]
 80038b2:	18cc      	adds	r4, r1, r3
 80038b4:	4630      	mov	r0, r6
 80038b6:	f000 f85c 	bl	8003972 <__malloc_unlock>
 80038ba:	f104 000b 	add.w	r0, r4, #11
 80038be:	1d23      	adds	r3, r4, #4
 80038c0:	f020 0007 	bic.w	r0, r0, #7
 80038c4:	1ac3      	subs	r3, r0, r3
 80038c6:	d0d3      	beq.n	8003870 <_malloc_r+0x20>
 80038c8:	425a      	negs	r2, r3
 80038ca:	50e2      	str	r2, [r4, r3]
 80038cc:	e7d0      	b.n	8003870 <_malloc_r+0x20>
 80038ce:	428c      	cmp	r4, r1
 80038d0:	684b      	ldr	r3, [r1, #4]
 80038d2:	bf16      	itet	ne
 80038d4:	6063      	strne	r3, [r4, #4]
 80038d6:	6013      	streq	r3, [r2, #0]
 80038d8:	460c      	movne	r4, r1
 80038da:	e7eb      	b.n	80038b4 <_malloc_r+0x64>
 80038dc:	460c      	mov	r4, r1
 80038de:	6849      	ldr	r1, [r1, #4]
 80038e0:	e7cc      	b.n	800387c <_malloc_r+0x2c>
 80038e2:	1cc4      	adds	r4, r0, #3
 80038e4:	f024 0403 	bic.w	r4, r4, #3
 80038e8:	42a0      	cmp	r0, r4
 80038ea:	d005      	beq.n	80038f8 <_malloc_r+0xa8>
 80038ec:	1a21      	subs	r1, r4, r0
 80038ee:	4630      	mov	r0, r6
 80038f0:	f000 f82e 	bl	8003950 <_sbrk_r>
 80038f4:	3001      	adds	r0, #1
 80038f6:	d0cf      	beq.n	8003898 <_malloc_r+0x48>
 80038f8:	6025      	str	r5, [r4, #0]
 80038fa:	e7db      	b.n	80038b4 <_malloc_r+0x64>
 80038fc:	20000090 	.word	0x20000090
 8003900:	20000094 	.word	0x20000094

08003904 <_realloc_r>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	4607      	mov	r7, r0
 8003908:	4614      	mov	r4, r2
 800390a:	460e      	mov	r6, r1
 800390c:	b921      	cbnz	r1, 8003918 <_realloc_r+0x14>
 800390e:	4611      	mov	r1, r2
 8003910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003914:	f7ff bf9c 	b.w	8003850 <_malloc_r>
 8003918:	b922      	cbnz	r2, 8003924 <_realloc_r+0x20>
 800391a:	f7ff ff4b 	bl	80037b4 <_free_r>
 800391e:	4625      	mov	r5, r4
 8003920:	4628      	mov	r0, r5
 8003922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003924:	f000 f826 	bl	8003974 <_malloc_usable_size_r>
 8003928:	42a0      	cmp	r0, r4
 800392a:	d20f      	bcs.n	800394c <_realloc_r+0x48>
 800392c:	4621      	mov	r1, r4
 800392e:	4638      	mov	r0, r7
 8003930:	f7ff ff8e 	bl	8003850 <_malloc_r>
 8003934:	4605      	mov	r5, r0
 8003936:	2800      	cmp	r0, #0
 8003938:	d0f2      	beq.n	8003920 <_realloc_r+0x1c>
 800393a:	4631      	mov	r1, r6
 800393c:	4622      	mov	r2, r4
 800393e:	f7ff ff15 	bl	800376c <memcpy>
 8003942:	4631      	mov	r1, r6
 8003944:	4638      	mov	r0, r7
 8003946:	f7ff ff35 	bl	80037b4 <_free_r>
 800394a:	e7e9      	b.n	8003920 <_realloc_r+0x1c>
 800394c:	4635      	mov	r5, r6
 800394e:	e7e7      	b.n	8003920 <_realloc_r+0x1c>

08003950 <_sbrk_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4c06      	ldr	r4, [pc, #24]	; (800396c <_sbrk_r+0x1c>)
 8003954:	2300      	movs	r3, #0
 8003956:	4605      	mov	r5, r0
 8003958:	4608      	mov	r0, r1
 800395a:	6023      	str	r3, [r4, #0]
 800395c:	f7fd f8ac 	bl	8000ab8 <_sbrk>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_sbrk_r+0x1a>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	b103      	cbz	r3, 800396a <_sbrk_r+0x1a>
 8003968:	602b      	str	r3, [r5, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	20000104 	.word	0x20000104

08003970 <__malloc_lock>:
 8003970:	4770      	bx	lr

08003972 <__malloc_unlock>:
 8003972:	4770      	bx	lr

08003974 <_malloc_usable_size_r>:
 8003974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003978:	1f18      	subs	r0, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	bfbc      	itt	lt
 800397e:	580b      	ldrlt	r3, [r1, r0]
 8003980:	18c0      	addlt	r0, r0, r3
 8003982:	4770      	bx	lr

08003984 <_init>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	bf00      	nop
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr

08003990 <_fini>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr
